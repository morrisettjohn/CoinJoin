"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HDNode = exports.Mnemonic = exports.PubSub = exports.Socket = exports.Buffer = exports.BN = exports.AvalancheCore = exports.DB = exports.BinTools = exports.Avalanche = void 0;
/**
 * @packageDocumentation
 * @module Avalanche
 */
const avalanche_1 = __importDefault(require("./avalanche"));
exports.AvalancheCore = avalanche_1.default;
const api_1 = require("./apis/admin/api");
const api_2 = require("./apis/auth/api");
const api_3 = require("./apis/avm/api");
const api_4 = require("./apis/evm/api");
const api_5 = require("./apis/health/api");
const api_6 = require("./apis/index/api");
const api_7 = require("./apis/info/api");
const api_8 = require("./apis/keystore/api");
const api_9 = require("./apis/metrics/api");
const api_10 = require("./apis/platformvm/api");
const socket_1 = require("./apis/socket/socket");
Object.defineProperty(exports, "Socket", { enumerable: true, get: function () { return socket_1.Socket; } });
const constants_1 = require("./utils/constants");
const helperfunctions_1 = require("./utils/helperfunctions");
const bintools_1 = __importDefault(require("./utils/bintools"));
exports.BinTools = bintools_1.default;
const db_1 = __importDefault(require("./utils/db"));
exports.DB = db_1.default;
const mnemonic_1 = __importDefault(require("./utils/mnemonic"));
exports.Mnemonic = mnemonic_1.default;
const pubsub_1 = __importDefault(require("./utils/pubsub"));
exports.PubSub = pubsub_1.default;
const hdnode_1 = __importDefault(require("./utils/hdnode"));
exports.HDNode = hdnode_1.default;
const bn_js_1 = __importDefault(require("bn.js"));
exports.BN = bn_js_1.default;
const buffer_1 = require("buffer/");
Object.defineProperty(exports, "Buffer", { enumerable: true, get: function () { return buffer_1.Buffer; } });
/**
 * AvalancheJS is middleware for interacting with Avalanche node RPC APIs.
 *
 * Example usage:
 * ```js
 * let avalanche = new Avalanche("127.0.0.1", 9650, "https");
 * ```
 *
 */
class Avalanche extends avalanche_1.default {
    /**
       * Creates a new Avalanche instance. Sets the address and port of the main Avalanche Client.
       *
       * @param ip The hostname to resolve to reach the Avalanche Client RPC APIs
       * @param port The port to resolve to reach the Avalanche Client RPC APIs
       * @param protocol The protocol string to use before a "://" in a request,
       * ex: "http", "https", "git", "ws", etc ...
       * @param networkid Sets the NetworkID of the class. Default [[DefaultNetworkID]]
       * @param XChainID Sets the blockchainID for the AVM. Will try to auto-detect,
       * otherwise default "4R5p2RXDGLqaifZE4hHWH9owe34pfoBULn1DrQTWivjg8o4aH"
       * @param CChainID Sets the blockchainID for the EVM. Will try to auto-detect,
       * otherwise default "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5"
       * @param hrp The human-readable part of the bech32 addresses
       * @param skipinit Skips creating the APIs
       */
    constructor(ip, port, protocol = 'http', networkID = constants_1.DefaultNetworkID, XChainID = undefined, CChainID = undefined, hrp = undefined, skipinit = false) {
        super(ip, port, protocol);
        /**
           * Returns a reference to the Admin RPC.
           */
        this.Admin = () => this.apis.admin;
        /**
           * Returns a reference to the Auth RPC.
           */
        this.Auth = () => this.apis.auth;
        /**
         * Returns a reference to the EVMAPI RPC pointed at the C-Chain.
         */
        this.CChain = () => this.apis.cchain;
        /**
           * Returns a reference to the AVM RPC pointed at the X-Chain.
           */
        this.XChain = () => this.apis.xchain;
        /**
           * Returns a reference to the Health RPC for a node.
           */
        this.Health = () => this.apis.health;
        /**
           * Returns a reference to the Index RPC for a node.
           */
        this.Index = () => this.apis.index;
        /**
           * Returns a reference to the Info RPC for a node.
           */
        this.Info = () => this.apis.info;
        /**
           * Returns a reference to the Metrics RPC.
           */
        this.Metrics = () => this.apis.metrics;
        /**
           * Returns a reference to the Keystore RPC for a node. We label it "NodeKeys" to reduce
           * confusion about what it's accessing.
           */
        this.NodeKeys = () => this.apis.keystore;
        /**
           * Returns a reference to the PlatformVM RPC pointed at the P-Chain.
           */
        this.PChain = () => this.apis.pchain;
        let xchainid = XChainID;
        let cchainid = CChainID;
        if (typeof XChainID === 'undefined'
            || !XChainID
            || XChainID.toLowerCase() === 'x') {
            if (networkID.toString() in constants_1.Defaults.network) {
                xchainid = constants_1.Defaults.network[networkID].X.blockchainID;
            }
            else {
                xchainid = constants_1.Defaults.network[12345].X.blockchainID;
            }
        }
        if (typeof CChainID === 'undefined'
            || !CChainID
            || CChainID.toLowerCase() === 'c') {
            if (networkID.toString() in constants_1.Defaults.network) {
                cchainid = constants_1.Defaults.network[networkID].C.blockchainID;
            }
            else {
                cchainid = constants_1.Defaults.network[12345].C.blockchainID;
            }
        }
        if (typeof networkID === 'number' && networkID >= 0) {
            this.networkID = networkID;
        }
        else if (typeof networkID === "undefined") {
            networkID = constants_1.DefaultNetworkID;
        }
        if (typeof hrp !== "undefined") {
            this.hrp = hrp;
        }
        else {
            this.hrp = helperfunctions_1.getPreferredHRP(this.networkID);
        }
        if (!skipinit) {
            this.addAPI('admin', api_1.AdminAPI);
            this.addAPI('auth', api_2.AuthAPI);
            this.addAPI('xchain', api_3.AVMAPI, '/ext/bc/X', xchainid);
            this.addAPI('cchain', api_4.EVMAPI, '/ext/bc/C/avax', cchainid);
            this.addAPI('health', api_5.HealthAPI);
            this.addAPI('info', api_7.InfoAPI);
            this.addAPI('index', api_6.IndexAPI);
            this.addAPI('keystore', api_8.KeystoreAPI);
            this.addAPI('metrics', api_9.MetricsAPI);
            this.addAPI('pchain', api_10.PlatformVMAPI);
        }
    }
}
exports.default = Avalanche;
exports.Avalanche = Avalanche;
exports.utils = __importStar(require("./utils"));
exports.common = __importStar(require("./common"));
exports.admin = __importStar(require("./apis/admin"));
exports.auth = __importStar(require("./apis/auth"));
exports.avm = __importStar(require("./apis/avm"));
exports.evm = __importStar(require("./apis/evm"));
exports.health = __importStar(require("./apis/health"));
exports.info = __importStar(require("./apis/info"));
exports.index = __importStar(require("./apis/index"));
exports.keystore = __importStar(require("./apis/keystore"));
exports.metrics = __importStar(require("./apis/metrics"));
exports.platformvm = __importStar(require("./apis/platformvm"));
//# sourceMappingURL=data:application/json;base64,