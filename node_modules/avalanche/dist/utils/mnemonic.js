"use strict";
/**
 * @packageDocumentation
 * @module Utils-Mnemonic
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("./errors");
const bip39 = require('bip39');
const randomBytes = require("randombytes");
/**
 * BIP39 Mnemonic code for generating deterministic keys.
 *
 */
class Mnemonic {
    constructor() {
        this.wordlists = bip39.wordlists;
    }
    /**
     * Retrieves the Mnemonic singleton.
     */
    static getInstance() {
        if (!Mnemonic.instance) {
            Mnemonic.instance = new Mnemonic();
        }
        return Mnemonic.instance;
    }
    /**
     * Return wordlists
     *
     * @param language a string specifying the language
     *
     * @returns A [[Wordlist]] object or array of strings
     */
    getWordlists(language) {
        if (language !== undefined) {
            return this.wordlists[language];
        }
        else {
            return this.wordlists;
        }
    }
    /**
     * Synchronously takes mnemonic and password and returns {@link https://github.com/feross/buffer|Buffer}
     *
     * @param mnemonic the mnemonic as a string
     * @param password the password as a string
     *
     * @returns A {@link https://github.com/feross/buffer|Buffer}
     */
    mnemonicToSeedSync(mnemonic, password) {
        return bip39.mnemonicToSeedSync(mnemonic, password);
    }
    /**
     * Asynchronously takes mnemonic and password and returns Promise<{@link https://github.com/feross/buffer|Buffer}>
     *
     * @param mnemonic the mnemonic as a string
     * @param password the password as a string
     *
     * @returns A {@link https://github.com/feross/buffer|Buffer}
     */
    mnemonicToSeed(mnemonic, password) {
        return __awaiter(this, void 0, void 0, function* () {
            return bip39.mnemonicToSeed(mnemonic, password);
        });
    }
    /**
     * Takes mnemonic and wordlist and returns buffer
     *
     * @param mnemonic the mnemonic as a string
     * @param wordlist Optional the wordlist as an array of strings
     *
     * @returns A string
     */
    mnemonicToEntropy(mnemonic, wordlist) {
        return bip39.mnemonicToEntropy(mnemonic, wordlist);
    }
    /**
     * Takes mnemonic and wordlist and returns buffer
     *
     * @param entropy the entropy as a {@link https://github.com/feross/buffer|Buffer} or as a string
     * @param wordlist Optional, the wordlist as an array of strings
     *
     * @returns A string
     */
    entropyToMnemonic(entropy, wordlist) {
        return bip39.entropyToMnemonic(entropy, wordlist);
    }
    /**
     * Validates a mnemonic
     11*
     * @param mnemonic the mnemonic as a string
     * @param wordlist Optional the wordlist as an array of strings
     *
     * @returns A string
     */
    validateMnemonic(mnemonic, wordlist) {
        return bip39.validateMnemonic(mnemonic, wordlist);
    }
    /**
     * Sets the default word list
     *
     * @param language the language as a string
     *
     */
    setDefaultWordlist(language) {
        bip39.setDefaultWordlist(language);
    }
    /**
     * Returns the language of the default word list
     *
     * @returns A string
     */
    getDefaultWordlist() {
        return bip39.getDefaultWordlist();
    }
    /**
     * Generate a random mnemonic (uses crypto.randomBytes under the hood), defaults to 256-bits of entropy
     *
     * @param strength Optional the strength as a number
     * @param rng Optional the random number generator. Defaults to crypto.randomBytes
     * @param wordlist Optional
     *
     */
    generateMnemonic(strength, rng, wordlist) {
        strength = strength || 256;
        if (strength % 32 !== 0) {
            throw new errors_1.InvalidEntropy('Error - Invalid entropy');
        }
        rng = rng || randomBytes;
        return bip39.generateMnemonic(strength, rng, wordlist);
    }
}
exports.default = Mnemonic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW5lbW9uaWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvbW5lbW9uaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7Ozs7Ozs7QUFJSCxxQ0FBeUM7QUFDekMsTUFBTSxLQUFLLEdBQVEsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQ25DLE1BQU0sV0FBVyxHQUFRLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUUvQzs7O0dBR0c7QUFDSCxNQUFxQixRQUFRO0lBRTNCO1FBQ1UsY0FBUyxHQUFhLEtBQUssQ0FBQyxTQUFTLENBQUE7SUFEdkIsQ0FBQztJQUd6Qjs7T0FFRztJQUNILE1BQU0sQ0FBQyxXQUFXO1FBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO1lBQ3RCLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQTtTQUNuQztRQUNELE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQTtJQUMxQixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsWUFBWSxDQUFDLFFBQWlCO1FBQzVCLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUMxQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUE7U0FDaEM7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQTtTQUN0QjtJQUNILENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsa0JBQWtCLENBQUMsUUFBZ0IsRUFBRSxRQUFnQjtRQUNuRCxPQUFPLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDckQsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDRyxjQUFjLENBQUMsUUFBZ0IsRUFBRSxRQUFnQjs7WUFDckQsT0FBTyxLQUFLLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUNqRCxDQUFDO0tBQUE7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsaUJBQWlCLENBQ2YsUUFBZ0IsRUFDaEIsUUFBbUI7UUFFbkIsT0FBTyxLQUFLLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ3BELENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsaUJBQWlCLENBQ2YsT0FBd0IsRUFDeEIsUUFBbUI7UUFFbkIsT0FBTyxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ25ELENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsZ0JBQWdCLENBQ2QsUUFBZ0IsRUFDaEIsUUFBbUI7UUFFbkIsT0FBTyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ25ELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILGtCQUFrQixDQUFDLFFBQWdCO1FBQ2pDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNwQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGtCQUFrQjtRQUNoQixPQUFPLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFBO0lBQ25DLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsZ0JBQWdCLENBQUMsUUFBaUIsRUFDaEMsR0FBOEIsRUFDOUIsUUFBbUI7UUFFbkIsUUFBUSxHQUFHLFFBQVEsSUFBSSxHQUFHLENBQUE7UUFDMUIsSUFBSSxRQUFRLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRTtZQUN2QixNQUFNLElBQUksdUJBQWMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBO1NBQ3BEO1FBQ0QsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXLENBQUE7UUFDeEIsT0FBTyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUN4RCxDQUFDO0NBQ0Y7QUF6SUQsMkJBeUlDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgVXRpbHMtTW5lbW9uaWNcbiAqL1xuXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXIvJ1xuaW1wb3J0IHsgV29yZGxpc3QgfSBmcm9tICdldGhlcnMnXG5pbXBvcnQgeyBJbnZhbGlkRW50cm9weSB9IGZyb20gJy4vZXJyb3JzJ1xuY29uc3QgYmlwMzk6IGFueSA9IHJlcXVpcmUoJ2JpcDM5JylcbmNvbnN0IHJhbmRvbUJ5dGVzOiBhbnkgPSByZXF1aXJlKFwicmFuZG9tYnl0ZXNcIilcblxuLyoqXG4gKiBCSVAzOSBNbmVtb25pYyBjb2RlIGZvciBnZW5lcmF0aW5nIGRldGVybWluaXN0aWMga2V5cy5cbiAqXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1uZW1vbmljIHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IE1uZW1vbmljXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7IH1cbiAgcHJvdGVjdGVkIHdvcmRsaXN0czogc3RyaW5nW10gPSBiaXAzOS53b3JkbGlzdHNcblxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBNbmVtb25pYyBzaW5nbGV0b24uXG4gICAqL1xuICBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogTW5lbW9uaWMge1xuICAgIGlmICghTW5lbW9uaWMuaW5zdGFuY2UpIHtcbiAgICAgIE1uZW1vbmljLmluc3RhbmNlID0gbmV3IE1uZW1vbmljKClcbiAgICB9XG4gICAgcmV0dXJuIE1uZW1vbmljLmluc3RhbmNlXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHdvcmRsaXN0c1xuICAgKlxuICAgKiBAcGFyYW0gbGFuZ3VhZ2UgYSBzdHJpbmcgc3BlY2lmeWluZyB0aGUgbGFuZ3VhZ2VcbiAgICpcbiAgICogQHJldHVybnMgQSBbW1dvcmRsaXN0XV0gb2JqZWN0IG9yIGFycmF5IG9mIHN0cmluZ3NcbiAgICovXG4gIGdldFdvcmRsaXN0cyhsYW5ndWFnZT86IHN0cmluZyk6IHN0cmluZ1tdIHwgV29yZGxpc3Qge1xuICAgIGlmIChsYW5ndWFnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy53b3JkbGlzdHNbbGFuZ3VhZ2VdXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLndvcmRsaXN0c1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTeW5jaHJvbm91c2x5IHRha2VzIG1uZW1vbmljIGFuZCBwYXNzd29yZCBhbmQgcmV0dXJucyB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfVxuICAgKlxuICAgKiBAcGFyYW0gbW5lbW9uaWMgdGhlIG1uZW1vbmljIGFzIGEgc3RyaW5nXG4gICAqIEBwYXJhbSBwYXNzd29yZCB0aGUgcGFzc3dvcmQgYXMgYSBzdHJpbmdcbiAgICpcbiAgICogQHJldHVybnMgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfVxuICAgKi9cbiAgbW5lbW9uaWNUb1NlZWRTeW5jKG1uZW1vbmljOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBCdWZmZXIge1xuICAgIHJldHVybiBiaXAzOS5tbmVtb25pY1RvU2VlZFN5bmMobW5lbW9uaWMsIHBhc3N3b3JkKVxuICB9XG5cbiAgLyoqXG4gICAqIEFzeW5jaHJvbm91c2x5IHRha2VzIG1uZW1vbmljIGFuZCBwYXNzd29yZCBhbmQgcmV0dXJucyBQcm9taXNlPHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9PlxuICAgKlxuICAgKiBAcGFyYW0gbW5lbW9uaWMgdGhlIG1uZW1vbmljIGFzIGEgc3RyaW5nXG4gICAqIEBwYXJhbSBwYXNzd29yZCB0aGUgcGFzc3dvcmQgYXMgYSBzdHJpbmdcbiAgICpcbiAgICogQHJldHVybnMgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfVxuICAgKi9cbiAgYXN5bmMgbW5lbW9uaWNUb1NlZWQobW5lbW9uaWM6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8QnVmZmVyPiB7XG4gICAgcmV0dXJuIGJpcDM5Lm1uZW1vbmljVG9TZWVkKG1uZW1vbmljLCBwYXNzd29yZClcbiAgfVxuXG4gIC8qKlxuICAgKiBUYWtlcyBtbmVtb25pYyBhbmQgd29yZGxpc3QgYW5kIHJldHVybnMgYnVmZmVyXG4gICAqXG4gICAqIEBwYXJhbSBtbmVtb25pYyB0aGUgbW5lbW9uaWMgYXMgYSBzdHJpbmdcbiAgICogQHBhcmFtIHdvcmRsaXN0IE9wdGlvbmFsIHRoZSB3b3JkbGlzdCBhcyBhbiBhcnJheSBvZiBzdHJpbmdzXG4gICAqXG4gICAqIEByZXR1cm5zIEEgc3RyaW5nXG4gICAqL1xuICBtbmVtb25pY1RvRW50cm9weShcbiAgICBtbmVtb25pYzogc3RyaW5nLFxuICAgIHdvcmRsaXN0Pzogc3RyaW5nW11cbiAgKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYmlwMzkubW5lbW9uaWNUb0VudHJvcHkobW5lbW9uaWMsIHdvcmRsaXN0KVxuICB9XG5cbiAgLyoqXG4gICAqIFRha2VzIG1uZW1vbmljIGFuZCB3b3JkbGlzdCBhbmQgcmV0dXJucyBidWZmZXJcbiAgICpcbiAgICogQHBhcmFtIGVudHJvcHkgdGhlIGVudHJvcHkgYXMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBvciBhcyBhIHN0cmluZ1xuICAgKiBAcGFyYW0gd29yZGxpc3QgT3B0aW9uYWwsIHRoZSB3b3JkbGlzdCBhcyBhbiBhcnJheSBvZiBzdHJpbmdzXG4gICAqXG4gICAqIEByZXR1cm5zIEEgc3RyaW5nXG4gICAqL1xuICBlbnRyb3B5VG9NbmVtb25pYyhcbiAgICBlbnRyb3B5OiBCdWZmZXIgfCBzdHJpbmcsXG4gICAgd29yZGxpc3Q/OiBzdHJpbmdbXVxuICApOiBzdHJpbmcge1xuICAgIHJldHVybiBiaXAzOS5lbnRyb3B5VG9NbmVtb25pYyhlbnRyb3B5LCB3b3JkbGlzdClcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgYSBtbmVtb25pY1xuICAgMTEqXG4gICAqIEBwYXJhbSBtbmVtb25pYyB0aGUgbW5lbW9uaWMgYXMgYSBzdHJpbmdcbiAgICogQHBhcmFtIHdvcmRsaXN0IE9wdGlvbmFsIHRoZSB3b3JkbGlzdCBhcyBhbiBhcnJheSBvZiBzdHJpbmdzXG4gICAqXG4gICAqIEByZXR1cm5zIEEgc3RyaW5nXG4gICAqL1xuICB2YWxpZGF0ZU1uZW1vbmljKFxuICAgIG1uZW1vbmljOiBzdHJpbmcsXG4gICAgd29yZGxpc3Q/OiBzdHJpbmdbXVxuICApOiBzdHJpbmcge1xuICAgIHJldHVybiBiaXAzOS52YWxpZGF0ZU1uZW1vbmljKG1uZW1vbmljLCB3b3JkbGlzdClcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkZWZhdWx0IHdvcmQgbGlzdFxuICAgKlxuICAgKiBAcGFyYW0gbGFuZ3VhZ2UgdGhlIGxhbmd1YWdlIGFzIGEgc3RyaW5nXG4gICAqXG4gICAqL1xuICBzZXREZWZhdWx0V29yZGxpc3QobGFuZ3VhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIGJpcDM5LnNldERlZmF1bHRXb3JkbGlzdChsYW5ndWFnZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsYW5ndWFnZSBvZiB0aGUgZGVmYXVsdCB3b3JkIGxpc3RcbiAgICogXG4gICAqIEByZXR1cm5zIEEgc3RyaW5nXG4gICAqL1xuICBnZXREZWZhdWx0V29yZGxpc3QoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYmlwMzkuZ2V0RGVmYXVsdFdvcmRsaXN0KClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHJhbmRvbSBtbmVtb25pYyAodXNlcyBjcnlwdG8ucmFuZG9tQnl0ZXMgdW5kZXIgdGhlIGhvb2QpLCBkZWZhdWx0cyB0byAyNTYtYml0cyBvZiBlbnRyb3B5XG4gICAqIFxuICAgKiBAcGFyYW0gc3RyZW5ndGggT3B0aW9uYWwgdGhlIHN0cmVuZ3RoIGFzIGEgbnVtYmVyXG4gICAqIEBwYXJhbSBybmcgT3B0aW9uYWwgdGhlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yLiBEZWZhdWx0cyB0byBjcnlwdG8ucmFuZG9tQnl0ZXNcbiAgICogQHBhcmFtIHdvcmRsaXN0IE9wdGlvbmFsXG4gICAqIFxuICAgKi9cbiAgZ2VuZXJhdGVNbmVtb25pYyhzdHJlbmd0aD86IG51bWJlcixcbiAgICBybmc/OiAoc2l6ZTogbnVtYmVyKSA9PiBCdWZmZXIsXG4gICAgd29yZGxpc3Q/OiBzdHJpbmdbXSxcbiAgKTogc3RyaW5nIHtcbiAgICBzdHJlbmd0aCA9IHN0cmVuZ3RoIHx8IDI1NlxuICAgIGlmIChzdHJlbmd0aCAlIDMyICE9PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEVudHJvcHkoJ0Vycm9yIC0gSW52YWxpZCBlbnRyb3B5JylcbiAgICB9XG4gICAgcm5nID0gcm5nIHx8IHJhbmRvbUJ5dGVzXG4gICAgcmV0dXJuIGJpcDM5LmdlbmVyYXRlTW5lbW9uaWMoc3RyZW5ndGgsIHJuZywgd29yZGxpc3QpXG4gIH1cbn0iXX0=