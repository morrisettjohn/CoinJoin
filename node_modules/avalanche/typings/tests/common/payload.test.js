"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("buffer/");
const payload_1 = require("src/utils/payload");
const bintools_1 = __importDefault(require("src/utils/bintools"));
const bn_js_1 = __importDefault(require("bn.js"));
const bech32 = __importStar(require("bech32"));
let payloadTypes = payload_1.PayloadTypes.getInstance();
let bintools = bintools_1.default.getInstance();
describe("Payload", () => {
    let hrp = "tests";
    let cb58str = "MBcQpm1PsdfBKYscN3AYP56MusRDMZGF9";
    let cb58buf = bintools.bufferToB58(bintools.cb58Decode(cb58str));
    let chex = "849c0F8c6d9942a2605517AeaBe00133Cb159f8D";
    let bech = bech32.encode(hrp, bech32.toWords(bintools.b58ToBuffer(cb58buf)));
    let binstr = "Bx4v7ytutz3";
    let utf8str = "I am the very model of a modern Major-General.";
    let utf8b58 = bintools.bufferToB58(buffer_1.Buffer.from(utf8str));
    let utf8hex = buffer_1.Buffer.from(utf8str).toString("hex");
    let utf8b64 = buffer_1.Buffer.from(utf8str).toString("base64");
    let bnhex = "deadbeef";
    let svgstr = "<svg>hi mom</svg>";
    let csvstr = "1,2,3,4,5\neverybody,in the,house,come along, let's ride";
    let jsonobj = { boom: "goes the dynamite" };
    let yamlstr = "---\nrootproperty: blah\nsection:\n  one: two\n  three: four\n  Foo: Bar\n  empty: ~";
    let emailstr = "example@example.com";
    let urlstr = "https://example.com";
    let ipfsstr = "QmUy4jh5mGNZvLkjies1RWM4YuvJh5o2FYopNPVYwrRVGV";
    let onionstr = "https://el33th4xor.onion";
    let magnetstr = "magnet:?xt=urn:btih:c12fe1c06bba254a9dc9f519b335aa7c1367a88a";
    test("PayloadTypes", () => {
        expect(() => { payloadTypes.select(867309); }).toThrow();
        expect(payloadTypes.lookupID("BIN")).toBe(0);
        let pl = payloadTypes.select(0, binstr);
        expect(payloadTypes.getTypeID(pl.toBuffer())).toBe(0);
        let pp = payloadTypes.getContent(pl.toBuffer());
        expect(bintools.b58ToBuffer(binstr).toString("hex")).toBe(pp.toString("hex"));
        expect(payloadTypes.lookupType(0)).toBe("BIN");
        expect(payloadTypes.recast(pl).toBuffer().toString("hex")).toBe(pl.toBuffer().toString("hex"));
    });
    let testTable = [
        ["BIN", binstr, binstr],
        ["UTF8", utf8str, utf8b58],
        ["HEXSTR", utf8hex, utf8b58],
        ["B58STR", utf8b58, utf8b58],
        ["B64STR", utf8b64, utf8b58],
        ["BIGNUM", bnhex, bintools.bufferToB58(buffer_1.Buffer.from(bnhex, "hex"))],
        ["XCHAINADDR", "X-" + bech, cb58buf],
        ["PCHAINADDR", "P-" + bech, cb58buf],
        ["CCHAINADDR", "C-" + bech, cb58buf],
        ["TXID", cb58str, cb58buf],
        ["ASSETID", cb58str, cb58buf],
        ["UTXOID", cb58str, cb58buf],
        ["NFTID", cb58str, cb58buf],
        ["SUBNETID", cb58str, cb58buf],
        ["CHAINID", cb58str, cb58buf],
        ["NODEID", cb58str, cb58buf],
        ["SECPSIG", cb58str, cb58str],
        ["SECPENC", cb58str, cb58str],
        ["JPEG", binstr, binstr],
        ["PNG", binstr, binstr],
        ["BMP", binstr, binstr],
        ["ICO", binstr, binstr],
        ["SVG", svgstr, bintools.bufferToB58(buffer_1.Buffer.from(svgstr))],
        ["CSV", csvstr, bintools.bufferToB58(buffer_1.Buffer.from(csvstr))],
        ["JSON", JSON.stringify(jsonobj), bintools.bufferToB58(buffer_1.Buffer.from(JSON.stringify(jsonobj)))],
        ["YAML", yamlstr, bintools.bufferToB58(buffer_1.Buffer.from(yamlstr))],
        ["EMAIL", emailstr, bintools.bufferToB58(buffer_1.Buffer.from(emailstr))],
        ["URL", urlstr, bintools.bufferToB58(buffer_1.Buffer.from(urlstr))],
        ["IPFS", ipfsstr, ipfsstr],
        ["ONION", onionstr, bintools.bufferToB58(buffer_1.Buffer.from(onionstr))],
        ["MAGNET", magnetstr, bintools.bufferToB58(buffer_1.Buffer.from(magnetstr))]
    ];
    test.each(testTable)('Basic Payload Test: typestr %s; input %s; inputbuff %s', (typestr, inputstr, inputbuff) => {
        let buff = bintools.b58ToBuffer(inputbuff);
        let typeid = payloadTypes.lookupID(typestr);
        let typename = payloadTypes.lookupType(typeid);
        expect(typename).toBe(typestr);
        let c0 = payloadTypes.select(typeid);
        expect(c0.typeID()).toBe(typeid);
        expect(c0.typeName()).toBe(typename);
        let c1 = payloadTypes.select(typeid, buff);
        let c2 = payloadTypes.select(typeid, inputstr, hrp);
        let c3 = payloadTypes.select(typeid);
        c3.fromBuffer(c1.toBuffer());
        let c4 = payloadTypes.select(typeid);
        c4.fromBuffer(c2.toBuffer());
        let s1 = c1.toBuffer().toString("hex");
        let s2 = c2.toBuffer().toString("hex");
        let s3 = c3.toBuffer().toString("hex");
        let s4 = c4.toBuffer().toString("hex");
        expect(s1).toBe(s2);
        expect(s2).toBe(s3);
        expect(s3).toBe(s4);
    });
    test("BINPayload special cases", () => {
        let pl = payloadTypes.select(0, binstr);
        expect(bintools.bufferToB58(pl.returnType())).toBe(binstr);
    });
    test("UTF8Payload special cases", () => {
        let pl = new payload_1.UTF8Payload(utf8str);
        expect(pl.returnType()).toBe(utf8str);
    });
    test("HEXSTRPayload special cases", () => {
        let pl = new payload_1.HEXSTRPayload(utf8hex);
        expect(pl.returnType()).toBe(utf8hex);
    });
    test("B58STRPayload special cases", () => {
        let pl = new payload_1.B58STRPayload(utf8b58);
        expect(pl.returnType()).toBe(utf8b58);
    });
    test("B64STRPayload special cases", () => {
        let pl = new payload_1.B64STRPayload(utf8b64);
        expect(pl.returnType()).toBe(utf8b64);
    });
    test("BIGNUMPayload special cases", () => {
        let jenny = new bn_js_1.default(8675309);
        let pl = new payload_1.BIGNUMPayload(jenny);
        expect(pl.returnType().toString("hex")).toBe(jenny.toString("hex"));
    });
    test("XCHAINADDRPayload special cases", () => {
        let addr = "X-" + bech;
        let pl = new payload_1.XCHAINADDRPayload(addr, hrp);
        expect(pl.returnType(hrp)).toBe(addr);
        expect(pl.returnChainID()).toBe("X");
    });
    test("PCHAINADDRPayload special cases", () => {
        let addr = "P-" + bech;
        let pl = new payload_1.PCHAINADDRPayload(addr, hrp);
        expect(pl.returnType(hrp)).toBe(addr);
        expect(pl.returnChainID()).toBe("P");
    });
    test("CCHAINADDRPayload special cases", () => {
        let addr = "C-" + bech;
        let pl = new payload_1.CCHAINADDRPayload(addr, hrp);
        expect(pl.returnType(hrp)).toBe(addr);
        expect(pl.returnChainID()).toBe("C");
    });
    //handles all of cb58EncodedPayload
    test("TXIDPayload special cases", () => {
        let pl = new payload_1.TXIDPayload(cb58str);
        expect(pl.returnType()).toBe(cb58str);
    });
    test("JSONPayload special cases", () => {
        let pl = new payload_1.JSONPayload(jsonobj);
        expect(JSON.stringify(pl.returnType())).toBe(JSON.stringify(jsonobj));
    });
});
//# sourceMappingURL=data:application/json;base64,