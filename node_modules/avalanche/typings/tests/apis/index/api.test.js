"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_mock_axios_1 = __importDefault(require("jest-mock-axios"));
const src_1 = require("src");
describe('Index', () => {
    const ip = '127.0.0.1';
    const port = 9650;
    const protocol = 'https';
    const avalanche = new src_1.Avalanche(ip, port, protocol, 12345);
    let index;
    const id = '6fXf5hncR8LXvwtM8iezFQBpK5cubV6y1dWgpJCcNyzGB1EzY';
    const bytes = '111115HRzXVDSeonLBcv6QdJkQFjPzPEobMWy7PyGuoheggsMCx73MVXZo2hJMEXXvR5gFFasTRJH36aVkLiWHtTTFcghyFTqjaHnBhdXTRiLaYcro3jpseqLAFVn3ngnAB47nebQiBBKmg3nFWKzQUDxMuE6uDGXgnGouDSaEKZxfKreoLHYNUxH56rgi5c8gKFYSDi8AWBgy26siwAWj6V8EgFnPVgm9pmKCfXio6BP7Bua4vrupoX8jRGqdrdkN12dqGAibJ78Rf44SSUXhEvJtPxAzjEGfiTyAm5BWFqPdheKN72HyrBBtwC6y7wG6suHngZ1PMBh93Ubkbt8jjjGoEgs5NjpasJpE8YA9ZMLTPeNZ6ELFxV99zA46wvkjAwYHGzegBXvzGU5pGPbg28iW3iKhLoYAnReysY4x3fBhjPBsags37Z9P3SqioVifVX4wwzxYqbV72u1AWZ4JNmsnhVDP196Gu99QTzmySGTVGP5ABNdZrngTRfmGTFCRbt9CHsgNbhgetkxbsEG7tySi3gFxMzGuJ2Npk2gnSr68LgtYdSHf48Ns';
    const timestamp = '2021-04-02T15:34:00.262979-07:00';
    const idx = '0';
    beforeAll(() => {
        index = avalanche.Index();
    });
    afterEach(() => {
        jest_mock_axios_1.default.reset();
    });
    test('getLastAccepted', () => __awaiter(void 0, void 0, void 0, function* () {
        const encoding = 'cb58';
        const baseurl = "/ext/index/X/tx";
        const respobj = {
            id,
            bytes,
            timestamp,
            encoding,
            idx
        };
        const result = index.getLastAccepted(encoding, baseurl);
        const payload = {
            result: respobj,
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(JSON.stringify(response)).toBe(JSON.stringify(respobj));
    }));
    test('getContainerByIndex', () => __awaiter(void 0, void 0, void 0, function* () {
        const encoding = 'cb58';
        const baseurl = "/ext/index/X/tx";
        const respobj = {
            id,
            bytes,
            timestamp,
            encoding,
            idx
        };
        const result = index.getContainerByIndex(idx, encoding, baseurl);
        const payload = {
            result: respobj,
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(JSON.stringify(response)).toBe(JSON.stringify(respobj));
    }));
    test('getContainerByID', () => __awaiter(void 0, void 0, void 0, function* () {
        const encoding = 'cb58';
        const baseurl = "/ext/index/X/tx";
        const respobj = {
            id,
            bytes,
            timestamp,
            encoding,
            idx
        };
        const result = index.getContainerByIndex(id, encoding, baseurl);
        const payload = {
            result: respobj,
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(JSON.stringify(response)).toBe(JSON.stringify(respobj));
    }));
    test('getContainerRange', () => __awaiter(void 0, void 0, void 0, function* () {
        const startIndex = 0;
        const numToFetch = 100;
        const encoding = "hex";
        const baseurl = "/ext/index/X/tx";
        const respobj = {
            id,
            bytes,
            timestamp,
            encoding,
            idx
        };
        const result = index.getContainerRange(startIndex, numToFetch, encoding, baseurl);
        const payload = {
            result: respobj,
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(JSON.stringify(response)).toBe(JSON.stringify(respobj));
    }));
    test('getIndex', () => __awaiter(void 0, void 0, void 0, function* () {
        const encoding = "hex";
        const baseurl = "/ext/index/X/tx";
        const result = index.getIndex(id, encoding, baseurl);
        const payload = {
            result: {
                index: "0"
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe('0');
    }));
    test('isAccepted', () => __awaiter(void 0, void 0, void 0, function* () {
        const encoding = "hex";
        const baseurl = "/ext/index/X/tx";
        const result = index.isAccepted(id, encoding, baseurl);
        const payload = {
            result: true
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(true);
    }));
});
//# sourceMappingURL=data:application/json;base64,