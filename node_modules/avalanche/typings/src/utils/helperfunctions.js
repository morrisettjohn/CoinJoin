"use strict";
/**
 * @packageDocumentation
 * @module Utils-HelperFunctions
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeIDStringToBuffer = exports.bufferToNodeIDString = exports.privateKeyStringToBuffer = exports.bufferToPrivateKeyString = exports.UnixNow = exports.MaxWeightFormula = exports.getPreferredHRP = void 0;
const constants_1 = require("./constants");
const bn_js_1 = __importDefault(require("bn.js"));
const bintools_1 = __importDefault(require("../utils/bintools"));
const errors_1 = require("../utils/errors");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
function getPreferredHRP(networkID = undefined) {
    if (networkID in constants_1.NetworkIDToHRP) {
        return constants_1.NetworkIDToHRP[networkID];
    }
    else if (typeof networkID === "undefined") {
        return constants_1.NetworkIDToHRP[constants_1.DefaultNetworkID];
    }
    return constants_1.FallbackHRP;
}
exports.getPreferredHRP = getPreferredHRP;
function MaxWeightFormula(staked, cap) {
    return bn_js_1.default.min(staked.mul(new bn_js_1.default(5)), cap);
}
exports.MaxWeightFormula = MaxWeightFormula;
/**
 * Function providing the current UNIX time using a {@link https://github.com/indutny/bn.js/|BN}.
 */
function UnixNow() {
    return new bn_js_1.default(Math.round((new Date()).getTime() / 1000));
}
exports.UnixNow = UnixNow;
/**
 * Takes a private key buffer and produces a private key string with prefix.
 *
 * @param pk A {@link https://github.com/feross/buffer|Buffer} for the private key.
 */
function bufferToPrivateKeyString(pk) {
    return "PrivateKey-" + bintools.cb58Encode(pk);
}
exports.bufferToPrivateKeyString = bufferToPrivateKeyString;
/**
 * Takes a private key string and produces a private key {@link https://github.com/feross/buffer|Buffer}.
 *
 * @param pk A string for the private key.
 */
function privateKeyStringToBuffer(pk) {
    if (!pk.startsWith("PrivateKey-")) {
        throw new errors_1.PrivateKeyError("Error - privateKeyStringToBuffer: private keys must start with 'PrivateKey-'");
    }
    let pksplit = pk.split("-");
    return bintools.cb58Decode(pksplit[pksplit.length - 1]);
}
exports.privateKeyStringToBuffer = privateKeyStringToBuffer;
/**
 * Takes a nodeID buffer and produces a nodeID string with prefix.
 *
 * @param pk A {@link https://github.com/feross/buffer|Buffer} for the nodeID.
 */
function bufferToNodeIDString(pk) {
    return "NodeID-" + bintools.cb58Encode(pk);
}
exports.bufferToNodeIDString = bufferToNodeIDString;
/**
 * Takes a nodeID string and produces a nodeID {@link https://github.com/feross/buffer|Buffer}.
 *
 * @param pk A string for the nodeID.
 */
function NodeIDStringToBuffer(pk) {
    if (!pk.startsWith("NodeID-")) {
        throw new errors_1.NodeIdError("Error - privateNodeIDToBuffer: nodeID must start with 'NodeID-'");
    }
    let pksplit = pk.split("-");
    return bintools.cb58Decode(pksplit[pksplit.length - 1]);
}
exports.NodeIDStringToBuffer = NodeIDStringToBuffer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVyZnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2hlbHBlcmZ1bmN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFFSCwyQ0FBNEU7QUFDNUUsa0RBQXVCO0FBRXZCLGlFQUF5QztBQUN6Qyw0Q0FBK0Q7QUFFL0Q7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBWSxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBRWpELFNBQWdCLGVBQWUsQ0FBQyxZQUFtQixTQUFTO0lBQ3hELElBQUksU0FBUyxJQUFJLDBCQUFjLEVBQUU7UUFDL0IsT0FBTywwQkFBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ2xDO1NBQU0sSUFBRyxPQUFPLFNBQVMsS0FBSyxXQUFXLEVBQUU7UUFDMUMsT0FBTywwQkFBYyxDQUFDLDRCQUFnQixDQUFDLENBQUM7S0FDekM7SUFDRCxPQUFPLHVCQUFXLENBQUM7QUFDdkIsQ0FBQztBQVBELDBDQU9DO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQUMsTUFBUyxFQUFFLEdBQU07SUFDaEQsT0FBTyxlQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRkQsNENBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLE9BQU87SUFDckIsT0FBTyxJQUFJLGVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUZELDBCQUVDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLHdCQUF3QixDQUFDLEVBQVM7SUFDaEQsT0FBTyxhQUFhLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBRkQsNERBRUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0Isd0JBQXdCLENBQUMsRUFBUztJQUNoRCxJQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsRUFBRTtRQUNoQyxNQUFNLElBQUksd0JBQWUsQ0FBQyw4RUFBOEUsQ0FBQyxDQUFDO0tBQzNHO0lBQ0QsSUFBSSxPQUFPLEdBQWlCLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUMsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQU5ELDREQU1DO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLG9CQUFvQixDQUFDLEVBQVM7SUFDNUMsT0FBTyxTQUFTLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRkQsb0RBRUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0Isb0JBQW9CLENBQUMsRUFBUztJQUM1QyxJQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUM1QixNQUFNLElBQUksb0JBQVcsQ0FBQyxpRUFBaUUsQ0FBQyxDQUFDO0tBQzFGO0lBQ0QsSUFBSSxPQUFPLEdBQWlCLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUMsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQU5ELG9EQU1DIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgVXRpbHMtSGVscGVyRnVuY3Rpb25zXG4gKi9cblxuaW1wb3J0IHsgTmV0d29ya0lEVG9IUlAsIERlZmF1bHROZXR3b3JrSUQsIEZhbGxiYWNrSFJQIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IEJOIGZyb20gJ2JuLmpzJztcbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlci8nO1xuaW1wb3J0IEJpblRvb2xzIGZyb20gJy4uL3V0aWxzL2JpbnRvb2xzJztcbmltcG9ydCB7IFByaXZhdGVLZXlFcnJvciwgTm9kZUlkRXJyb3IgfSBmcm9tICcuLi91dGlscy9lcnJvcnMnO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHM6QmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJlZmVycmVkSFJQKG5ldHdvcmtJRDpudW1iZXIgPSB1bmRlZmluZWQpIHtcbiAgICBpZiAobmV0d29ya0lEIGluIE5ldHdvcmtJRFRvSFJQKSB7XG4gICAgICByZXR1cm4gTmV0d29ya0lEVG9IUlBbbmV0d29ya0lEXTtcbiAgICB9IGVsc2UgaWYodHlwZW9mIG5ldHdvcmtJRCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIE5ldHdvcmtJRFRvSFJQW0RlZmF1bHROZXR3b3JrSURdO1xuICAgIH1cbiAgICByZXR1cm4gRmFsbGJhY2tIUlA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBNYXhXZWlnaHRGb3JtdWxhKHN0YWtlZDpCTiwgY2FwOkJOKTpCTntcbiAgcmV0dXJuIEJOLm1pbihzdGFrZWQubXVsKG5ldyBCTig1KSksIGNhcCk7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gcHJvdmlkaW5nIHRoZSBjdXJyZW50IFVOSVggdGltZSB1c2luZyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59LlxuICovXG5leHBvcnQgZnVuY3Rpb24gVW5peE5vdygpOkJOIHtcbiAgcmV0dXJuIG5ldyBCTihNYXRoLnJvdW5kKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLyAxMDAwKSk7XG59XG5cbi8qKlxuICogVGFrZXMgYSBwcml2YXRlIGtleSBidWZmZXIgYW5kIHByb2R1Y2VzIGEgcHJpdmF0ZSBrZXkgc3RyaW5nIHdpdGggcHJlZml4LlxuICogXG4gKiBAcGFyYW0gcGsgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBmb3IgdGhlIHByaXZhdGUga2V5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyVG9Qcml2YXRlS2V5U3RyaW5nKHBrOkJ1ZmZlcik6c3RyaW5nIHtcbiAgcmV0dXJuIFwiUHJpdmF0ZUtleS1cIiArIGJpbnRvb2xzLmNiNThFbmNvZGUocGspO1xufVxuXG4vKipcbiAqIFRha2VzIGEgcHJpdmF0ZSBrZXkgc3RyaW5nIGFuZCBwcm9kdWNlcyBhIHByaXZhdGUga2V5IHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9LlxuICogXG4gKiBAcGFyYW0gcGsgQSBzdHJpbmcgZm9yIHRoZSBwcml2YXRlIGtleS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByaXZhdGVLZXlTdHJpbmdUb0J1ZmZlcihwazpzdHJpbmcpOkJ1ZmZlciB7XG4gIGlmKCFway5zdGFydHNXaXRoKFwiUHJpdmF0ZUtleS1cIikpIHtcbiAgICB0aHJvdyBuZXcgUHJpdmF0ZUtleUVycm9yKFwiRXJyb3IgLSBwcml2YXRlS2V5U3RyaW5nVG9CdWZmZXI6IHByaXZhdGUga2V5cyBtdXN0IHN0YXJ0IHdpdGggJ1ByaXZhdGVLZXktJ1wiKTtcbiAgfVxuICBsZXQgcGtzcGxpdDpBcnJheTxzdHJpbmc+ID0gcGsuc3BsaXQoXCItXCIpO1xuICByZXR1cm4gYmludG9vbHMuY2I1OERlY29kZShwa3NwbGl0W3Brc3BsaXQubGVuZ3RoIC0gMV0pO1xufVxuXG4vKipcbiAqIFRha2VzIGEgbm9kZUlEIGJ1ZmZlciBhbmQgcHJvZHVjZXMgYSBub2RlSUQgc3RyaW5nIHdpdGggcHJlZml4LlxuICogXG4gKiBAcGFyYW0gcGsgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBmb3IgdGhlIG5vZGVJRC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlclRvTm9kZUlEU3RyaW5nKHBrOkJ1ZmZlcik6c3RyaW5nIHtcbiAgcmV0dXJuIFwiTm9kZUlELVwiICsgYmludG9vbHMuY2I1OEVuY29kZShwayk7XG59XG5cbi8qKlxuICogVGFrZXMgYSBub2RlSUQgc3RyaW5nIGFuZCBwcm9kdWNlcyBhIG5vZGVJRCB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfS5cbiAqIFxuICogQHBhcmFtIHBrIEEgc3RyaW5nIGZvciB0aGUgbm9kZUlELlxuICovXG5leHBvcnQgZnVuY3Rpb24gTm9kZUlEU3RyaW5nVG9CdWZmZXIocGs6c3RyaW5nKTpCdWZmZXIge1xuICBpZighcGsuc3RhcnRzV2l0aChcIk5vZGVJRC1cIikpIHtcbiAgICB0aHJvdyBuZXcgTm9kZUlkRXJyb3IoXCJFcnJvciAtIHByaXZhdGVOb2RlSURUb0J1ZmZlcjogbm9kZUlEIG11c3Qgc3RhcnQgd2l0aCAnTm9kZUlELSdcIik7XG4gIH1cbiAgbGV0IHBrc3BsaXQ6QXJyYXk8c3RyaW5nPiA9IHBrLnNwbGl0KFwiLVwiKTtcbiAgcmV0dXJuIGJpbnRvb2xzLmNiNThEZWNvZGUocGtzcGxpdFtwa3NwbGl0Lmxlbmd0aCAtIDFdKTtcbn0iXX0=