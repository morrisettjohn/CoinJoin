"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidEntropy = exports.EVMFeeError = exports.Bech32Error = exports.UnknownTypeError = exports.TypeNameError = exports.TypeIdError = exports.HexError = exports.NodeIdError = exports.PrivateKeyError = exports.Base58Error = exports.MergeRuleError = exports.PublicKeyError = exports.AddressIndexError = exports.BufferSizeError = exports.SubnetOwnerError = exports.DelegationFeeError = exports.TimeError = exports.StakeError = exports.FeeAssetError = exports.EVMOutputError = exports.EVMInputError = exports.SECPMintOutputError = exports.ThresholdError = exports.InsufficientFundsError = exports.UTXOError = exports.OutputIdError = exports.ChecksumError = exports.InvalidOperationIdError = exports.OperationError = exports.InputIdError = exports.TransferableInputError = exports.TransferableOutputError = exports.CredIdError = exports.CodecIdError = exports.TransactionError = exports.NameError = exports.SymbolError = exports.NoAtomicUTXOsError = exports.ChainIdError = exports.GooseEggCheckError = exports.AddressError = void 0;
const ADDRESS_ERROR_CODE = "1000";
const GOOSE_EGG_CHECK_ERROR_CODE = "1001";
const CHAIN_ID_ERROR_CODE = "1002";
const NO_ATOMIX_UTXOS_ERROR_CODE = "1003";
const SYMBOL_ERROR_CODE = "1004";
const NAME_ERROR_CODE = "1005";
const TRANSACTION_ERROR_CODE = "1006";
const CODEC_ID_ERROR_CODE = "1007";
const CRED_ID_ERROR_CODE = "1008";
const TRANSFERABLE_OUTPUT_ERROR_CODE = "1009";
const TRANSFERABLE_INPUT_ERROR_CODE = "1010";
const INPUT_ID_ERROR_CODE = "1011";
const OPERATION_ERROR_CODE = "1012";
const INVALID_OPERATION_ID_CODE = "1013";
const CHECKSUM_ERROR_CODE = "1014";
const OUTPUT_ID_ERROR_CODE = "1015";
const UTXO_ERROR_CODE = "1016";
const INSUFFICIENT_FUNDS_ERROR_CODE = "1017";
const THRESHOLD_ERROR_CODE = "1018";
const SECP_MINT_OUTPUT_ERROR_CODE = "1019";
const EVM_INPUT_ERROR_CODE = "1020";
const EVM_OUTPUT_ERROR_CODE = "1021";
const FEE_ASSET_ERROR_CODE = "1022";
const STAKE_ERROR_CODE = "1023";
const TIME_ERROR_CODE = "1024";
const DELEGATION_FEE_ERROR_CODE = "1025";
const SUBNET_OWNER_ERROR_CODE = "1026";
const BUFFER_SIZE_ERROR_CODE = "1027";
const ADDRESS_INDEX_ERROR_CODE = "1028";
const PUBLIC_KEY_ERROR_CODE = "1029";
const MERGE_RULE_ERROR_CODE = "1030";
const BASE58_ERROR_CODE = "1031";
const PRIVATE_KEY_ERROR_CODE = "1032";
const NODE_ID_ERROR_CODE = "1033";
const HEX_ERROR_CODE = "1034";
const TYPE_ID_ERROR_CODE = "1035";
const TYPE_NAME_ERROR_CODE = "1035";
const UNKNOWN_TYPE_ERROR_CODE = "1036";
const BECH32_ERROR_CODE = "1037";
const EVM_FEE_ERROR_CODE = "1038";
const INVALID_ENTROPY = "1039";
class AvalancheError extends Error {
    constructor(m, code) {
        super(m);
        Object.setPrototypeOf(this, AvalancheError.prototype);
        this.errorCode = code;
    }
    getCode() {
        return this.errorCode;
    }
}
class AddressError extends AvalancheError {
    constructor(m) {
        super(m, ADDRESS_ERROR_CODE);
        Object.setPrototypeOf(this, AddressError.prototype);
    }
}
exports.AddressError = AddressError;
class GooseEggCheckError extends AvalancheError {
    constructor(m) {
        super(m, GOOSE_EGG_CHECK_ERROR_CODE);
        Object.setPrototypeOf(this, GooseEggCheckError.prototype);
    }
}
exports.GooseEggCheckError = GooseEggCheckError;
class ChainIdError extends AvalancheError {
    constructor(m) {
        super(m, CHAIN_ID_ERROR_CODE);
        Object.setPrototypeOf(this, ChainIdError.prototype);
    }
}
exports.ChainIdError = ChainIdError;
class NoAtomicUTXOsError extends AvalancheError {
    constructor(m) {
        super(m, NO_ATOMIX_UTXOS_ERROR_CODE);
        Object.setPrototypeOf(this, NoAtomicUTXOsError.prototype);
    }
}
exports.NoAtomicUTXOsError = NoAtomicUTXOsError;
class SymbolError extends AvalancheError {
    constructor(m) {
        super(m, SYMBOL_ERROR_CODE);
        Object.setPrototypeOf(this, SymbolError.prototype);
    }
}
exports.SymbolError = SymbolError;
class NameError extends AvalancheError {
    constructor(m) {
        super(m, NAME_ERROR_CODE);
        Object.setPrototypeOf(this, NameError.prototype);
    }
}
exports.NameError = NameError;
class TransactionError extends AvalancheError {
    constructor(m) {
        super(m, TRANSACTION_ERROR_CODE);
        Object.setPrototypeOf(this, TransactionError.prototype);
    }
}
exports.TransactionError = TransactionError;
class CodecIdError extends AvalancheError {
    constructor(m) {
        super(m, CODEC_ID_ERROR_CODE);
        Object.setPrototypeOf(this, CodecIdError.prototype);
    }
}
exports.CodecIdError = CodecIdError;
class CredIdError extends AvalancheError {
    constructor(m) {
        super(m, CRED_ID_ERROR_CODE);
        Object.setPrototypeOf(this, CredIdError.prototype);
    }
}
exports.CredIdError = CredIdError;
class TransferableOutputError extends AvalancheError {
    constructor(m) {
        super(m, TRANSFERABLE_OUTPUT_ERROR_CODE);
        Object.setPrototypeOf(this, TransferableOutputError.prototype);
    }
}
exports.TransferableOutputError = TransferableOutputError;
class TransferableInputError extends AvalancheError {
    constructor(m) {
        super(m, TRANSFERABLE_INPUT_ERROR_CODE);
        Object.setPrototypeOf(this, TransferableInputError.prototype);
    }
}
exports.TransferableInputError = TransferableInputError;
class InputIdError extends AvalancheError {
    constructor(m) {
        super(m, INPUT_ID_ERROR_CODE);
        Object.setPrototypeOf(this, InputIdError.prototype);
    }
}
exports.InputIdError = InputIdError;
class OperationError extends AvalancheError {
    constructor(m) {
        super(m, OPERATION_ERROR_CODE);
        Object.setPrototypeOf(this, OperationError.prototype);
    }
}
exports.OperationError = OperationError;
class InvalidOperationIdError extends AvalancheError {
    constructor(m) {
        super(m, INVALID_OPERATION_ID_CODE);
        Object.setPrototypeOf(this, InvalidOperationIdError.prototype);
    }
}
exports.InvalidOperationIdError = InvalidOperationIdError;
class ChecksumError extends AvalancheError {
    constructor(m) {
        super(m, CHECKSUM_ERROR_CODE);
        Object.setPrototypeOf(this, ChecksumError.prototype);
    }
}
exports.ChecksumError = ChecksumError;
class OutputIdError extends AvalancheError {
    constructor(m) {
        super(m, OUTPUT_ID_ERROR_CODE);
        Object.setPrototypeOf(this, OutputIdError.prototype);
    }
}
exports.OutputIdError = OutputIdError;
class UTXOError extends AvalancheError {
    constructor(m) {
        super(m, UTXO_ERROR_CODE);
        Object.setPrototypeOf(this, UTXOError.prototype);
    }
}
exports.UTXOError = UTXOError;
class InsufficientFundsError extends AvalancheError {
    constructor(m) {
        super(m, INSUFFICIENT_FUNDS_ERROR_CODE);
        Object.setPrototypeOf(this, InsufficientFundsError.prototype);
    }
}
exports.InsufficientFundsError = InsufficientFundsError;
class ThresholdError extends AvalancheError {
    constructor(m) {
        super(m, THRESHOLD_ERROR_CODE);
        Object.setPrototypeOf(this, ThresholdError.prototype);
    }
}
exports.ThresholdError = ThresholdError;
class SECPMintOutputError extends AvalancheError {
    constructor(m) {
        super(m, SECP_MINT_OUTPUT_ERROR_CODE);
        Object.setPrototypeOf(this, SECPMintOutputError.prototype);
    }
}
exports.SECPMintOutputError = SECPMintOutputError;
class EVMInputError extends AvalancheError {
    constructor(m) {
        super(m, EVM_INPUT_ERROR_CODE);
        Object.setPrototypeOf(this, EVMInputError.prototype);
    }
}
exports.EVMInputError = EVMInputError;
class EVMOutputError extends AvalancheError {
    constructor(m) {
        super(m, EVM_OUTPUT_ERROR_CODE);
        Object.setPrototypeOf(this, EVMOutputError.prototype);
    }
}
exports.EVMOutputError = EVMOutputError;
class FeeAssetError extends AvalancheError {
    constructor(m) {
        super(m, FEE_ASSET_ERROR_CODE);
        Object.setPrototypeOf(this, FeeAssetError.prototype);
    }
}
exports.FeeAssetError = FeeAssetError;
class StakeError extends AvalancheError {
    constructor(m) {
        super(m, STAKE_ERROR_CODE);
        Object.setPrototypeOf(this, StakeError.prototype);
    }
}
exports.StakeError = StakeError;
class TimeError extends AvalancheError {
    constructor(m) {
        super(m, TIME_ERROR_CODE);
        Object.setPrototypeOf(this, TimeError.prototype);
    }
}
exports.TimeError = TimeError;
class DelegationFeeError extends AvalancheError {
    constructor(m) {
        super(m, DELEGATION_FEE_ERROR_CODE);
        Object.setPrototypeOf(this, DelegationFeeError.prototype);
    }
}
exports.DelegationFeeError = DelegationFeeError;
class SubnetOwnerError extends AvalancheError {
    constructor(m) {
        super(m, SUBNET_OWNER_ERROR_CODE);
        Object.setPrototypeOf(this, SubnetOwnerError.prototype);
    }
}
exports.SubnetOwnerError = SubnetOwnerError;
class BufferSizeError extends AvalancheError {
    constructor(m) {
        super(m, BUFFER_SIZE_ERROR_CODE);
        Object.setPrototypeOf(this, BufferSizeError.prototype);
    }
}
exports.BufferSizeError = BufferSizeError;
class AddressIndexError extends AvalancheError {
    constructor(m) {
        super(m, ADDRESS_INDEX_ERROR_CODE);
        Object.setPrototypeOf(this, AddressIndexError.prototype);
    }
}
exports.AddressIndexError = AddressIndexError;
class PublicKeyError extends AvalancheError {
    constructor(m) {
        super(m, PUBLIC_KEY_ERROR_CODE);
        Object.setPrototypeOf(this, PublicKeyError.prototype);
    }
}
exports.PublicKeyError = PublicKeyError;
class MergeRuleError extends AvalancheError {
    constructor(m) {
        super(m, MERGE_RULE_ERROR_CODE);
        Object.setPrototypeOf(this, MergeRuleError.prototype);
    }
}
exports.MergeRuleError = MergeRuleError;
class Base58Error extends AvalancheError {
    constructor(m) {
        super(m, BASE58_ERROR_CODE);
        Object.setPrototypeOf(this, Base58Error.prototype);
    }
}
exports.Base58Error = Base58Error;
class PrivateKeyError extends AvalancheError {
    constructor(m) {
        super(m, PRIVATE_KEY_ERROR_CODE);
        Object.setPrototypeOf(this, PrivateKeyError.prototype);
    }
}
exports.PrivateKeyError = PrivateKeyError;
class NodeIdError extends AvalancheError {
    constructor(m) {
        super(m, NODE_ID_ERROR_CODE);
        Object.setPrototypeOf(this, NodeIdError.prototype);
    }
}
exports.NodeIdError = NodeIdError;
class HexError extends AvalancheError {
    constructor(m) {
        super(m, HEX_ERROR_CODE);
        Object.setPrototypeOf(this, HexError.prototype);
    }
}
exports.HexError = HexError;
class TypeIdError extends AvalancheError {
    constructor(m) {
        super(m, TYPE_ID_ERROR_CODE);
        Object.setPrototypeOf(this, TypeIdError.prototype);
    }
}
exports.TypeIdError = TypeIdError;
class TypeNameError extends AvalancheError {
    constructor(m) {
        super(m, TYPE_NAME_ERROR_CODE);
        Object.setPrototypeOf(this, TypeNameError.prototype);
    }
}
exports.TypeNameError = TypeNameError;
class UnknownTypeError extends AvalancheError {
    constructor(m) {
        super(m, UNKNOWN_TYPE_ERROR_CODE);
        Object.setPrototypeOf(this, UnknownTypeError.prototype);
    }
}
exports.UnknownTypeError = UnknownTypeError;
class Bech32Error extends AvalancheError {
    constructor(m) {
        super(m, BECH32_ERROR_CODE);
        Object.setPrototypeOf(this, Bech32Error.prototype);
    }
}
exports.Bech32Error = Bech32Error;
class EVMFeeError extends AvalancheError {
    constructor(m) {
        super(m, EVM_FEE_ERROR_CODE);
        Object.setPrototypeOf(this, EVMFeeError.prototype);
    }
}
exports.EVMFeeError = EVMFeeError;
class InvalidEntropy extends AvalancheError {
    constructor(m) {
        super(m, INVALID_ENTROPY);
        Object.setPrototypeOf(this, InvalidEntropy.prototype);
    }
}
exports.InvalidEntropy = InvalidEntropy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2Vycm9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFNLGtCQUFrQixHQUFVLE1BQU0sQ0FBQztBQUN6QyxNQUFNLDBCQUEwQixHQUFVLE1BQU0sQ0FBQztBQUNqRCxNQUFNLG1CQUFtQixHQUFVLE1BQU0sQ0FBQztBQUMxQyxNQUFNLDBCQUEwQixHQUFVLE1BQU0sQ0FBQztBQUNqRCxNQUFNLGlCQUFpQixHQUFVLE1BQU0sQ0FBQTtBQUN2QyxNQUFNLGVBQWUsR0FBVSxNQUFNLENBQUM7QUFDdEMsTUFBTSxzQkFBc0IsR0FBVSxNQUFNLENBQUM7QUFDN0MsTUFBTSxtQkFBbUIsR0FBVSxNQUFNLENBQUM7QUFDMUMsTUFBTSxrQkFBa0IsR0FBVSxNQUFNLENBQUM7QUFDekMsTUFBTSw4QkFBOEIsR0FBVSxNQUFNLENBQUM7QUFDckQsTUFBTSw2QkFBNkIsR0FBVSxNQUFNLENBQUM7QUFDcEQsTUFBTSxtQkFBbUIsR0FBVSxNQUFNLENBQUM7QUFDMUMsTUFBTSxvQkFBb0IsR0FBVSxNQUFNLENBQUM7QUFDM0MsTUFBTSx5QkFBeUIsR0FBVSxNQUFNLENBQUM7QUFDaEQsTUFBTSxtQkFBbUIsR0FBVSxNQUFNLENBQUM7QUFDMUMsTUFBTSxvQkFBb0IsR0FBVSxNQUFNLENBQUM7QUFDM0MsTUFBTSxlQUFlLEdBQVUsTUFBTSxDQUFDO0FBQ3RDLE1BQU0sNkJBQTZCLEdBQVUsTUFBTSxDQUFDO0FBQ3BELE1BQU0sb0JBQW9CLEdBQVUsTUFBTSxDQUFDO0FBQzNDLE1BQU0sMkJBQTJCLEdBQVUsTUFBTSxDQUFDO0FBQ2xELE1BQU0sb0JBQW9CLEdBQVUsTUFBTSxDQUFDO0FBQzNDLE1BQU0scUJBQXFCLEdBQVUsTUFBTSxDQUFDO0FBQzVDLE1BQU0sb0JBQW9CLEdBQVUsTUFBTSxDQUFDO0FBQzNDLE1BQU0sZ0JBQWdCLEdBQVUsTUFBTSxD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LHNDQUtDO0FBRUQsTUFBYSxnQkFBaUIsU0FBUSxjQUFjO0lBQ2xELFlBQVksQ0FBUTtRQUNsQixLQUFLLENBQUMsQ0FBQyxFQUFFLHVCQUF1QixDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDMUQsQ0FBQztDQUNGO0FBTEQsNENBS0M7QUFFRCxNQUFhLFdBQVksU0FBUSxjQUFjO0lBQzdDLFlBQVksQ0FBUTtRQUNsQixLQUFLLENBQUMsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDNUIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FDRjtBQUxELGtDQUtDO0FBRUQsTUFBYSxXQUFZLFNBQVEsY0FBYztJQUM3QyxZQUFZLENBQVM7UUFDbkIsS0FBSyxDQUFDLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFBO1FBQzVCLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUNwRCxDQUFDO0NBQ0Y7QUFMRCxrQ0FLQztBQUVELE1BQWEsY0FBZSxTQUFRLGNBQWM7SUFDaEQsWUFBWSxDQUFTO1FBQ25CLEtBQUssQ0FBQyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUE7UUFDekIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3hELENBQUM7Q0FDRjtBQUxELHdDQUtDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQUREUkVTU19FUlJPUl9DT0RFOnN0cmluZyA9IFwiMTAwMFwiO1xuY29uc3QgR09PU0VfRUdHX0NIRUNLX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDAxXCI7XG5jb25zdCBDSEFJTl9JRF9FUlJPUl9DT0RFOnN0cmluZyA9IFwiMTAwMlwiO1xuY29uc3QgTk9fQVRPTUlYX1VUWE9TX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDAzXCI7XG5jb25zdCBTWU1CT0xfRVJST1JfQ09ERTpzdHJpbmcgPSBcIjEwMDRcIlxuY29uc3QgTkFNRV9FUlJPUl9DT0RFOnN0cmluZyA9IFwiMTAwNVwiO1xuY29uc3QgVFJBTlNBQ1RJT05fRVJST1JfQ09ERTpzdHJpbmcgPSBcIjEwMDZcIjtcbmNvbnN0IENPREVDX0lEX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDA3XCI7XG5jb25zdCBDUkVEX0lEX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDA4XCI7XG5jb25zdCBUUkFOU0ZFUkFCTEVfT1VUUFVUX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDA5XCI7XG5jb25zdCBUUkFOU0ZFUkFCTEVfSU5QVVRfRVJST1JfQ09ERTpzdHJpbmcgPSBcIjEwMTBcIjtcbmNvbnN0IElOUFVUX0lEX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDExXCI7XG5jb25zdCBPUEVSQVRJT05fRVJST1JfQ09ERTpzdHJpbmcgPSBcIjEwMTJcIjtcbmNvbnN0IElOVkFMSURfT1BFUkFUSU9OX0lEX0NPREU6c3RyaW5nID0gXCIxMDEzXCI7XG5jb25zdCBDSEVDS1NVTV9FUlJPUl9DT0RFOnN0cmluZyA9IFwiMTAxNFwiO1xuY29uc3QgT1VUUFVUX0lEX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDE1XCI7XG5jb25zdCBVVFhPX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDE2XCI7XG5jb25zdCBJTlNVRkZJQ0lFTlRfRlVORFNfRVJST1JfQ09ERTpzdHJpbmcgPSBcIjEwMTdcIjtcbmNvbnN0IFRIUkVTSE9MRF9FUlJPUl9DT0RFOnN0cmluZyA9IFwiMTAxOFwiO1xuY29uc3QgU0VDUF9NSU5UX09VVFBVVF9FUlJPUl9DT0RFOnN0cmluZyA9IFwiMTAxOVwiO1xuY29uc3QgRVZNX0lOUFVUX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDIwXCI7XG5jb25zdCBFVk1fT1VUUFVUX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDIxXCI7XG5jb25zdCBGRUVfQVNTRVRfRVJST1JfQ09ERTpzdHJpbmcgPSBcIjEwMjJcIjtcbmNvbnN0IFNUQUtFX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDIzXCI7XG5jb25zdCBUSU1FX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDI0XCI7XG5jb25zdCBERUxFR0FUSU9OX0ZFRV9FUlJPUl9DT0RFOnN0cmluZyA9IFwiMTAyNVwiO1xuY29uc3QgU1VCTkVUX09XTkVSX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDI2XCI7XG5jb25zdCBCVUZGRVJfU0laRV9FUlJPUl9DT0RFOnN0cmluZyA9IFwiMTAyN1wiO1xuY29uc3QgQUREUkVTU19JTkRFWF9FUlJPUl9DT0RFOnN0cmluZyA9IFwiMTAyOFwiO1xuY29uc3QgUFVCTElDX0tFWV9FUlJPUl9DT0RFOnN0cmluZyA9IFwiMTAyOVwiO1xuY29uc3QgTUVSR0VfUlVMRV9FUlJPUl9DT0RFOnN0cmluZyA9IFwiMTAzMFwiO1xuY29uc3QgQkFTRTU4X0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDMxXCI7XG5jb25zdCBQUklWQVRFX0tFWV9FUlJPUl9DT0RFOnN0cmluZyA9IFwiMTAzMlwiO1xuY29uc3QgTk9ERV9JRF9FUlJPUl9DT0RFOnN0cmluZyA9IFwiMTAzM1wiO1xuY29uc3QgSEVYX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDM0XCI7XG5jb25zdCBUWVBFX0lEX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDM1XCI7XG5jb25zdCBUWVBFX05BTUVfRVJST1JfQ09ERTpzdHJpbmcgPSBcIjEwMzVcIjtcbmNvbnN0IFVOS05PV05fVFlQRV9FUlJPUl9DT0RFOnN0cmluZyA9IFwiMTAzNlwiO1xuY29uc3QgQkVDSDMyX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDM3XCI7XG5jb25zdCBFVk1fRkVFX0VSUk9SX0NPREU6c3RyaW5nID0gXCIxMDM4XCI7XG5jb25zdCBJTlZBTElEX0VOVFJPUFk6IHN0cmluZyA9IFwiMTAzOVwiXG5cbmNsYXNzIEF2YWxhbmNoZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBlcnJvckNvZGU6IHN0cmluZztcbiAgY29uc3RydWN0b3IobTpzdHJpbmcsIGNvZGU6c3RyaW5nKSB7XG4gICAgc3VwZXIobSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEF2YWxhbmNoZUVycm9yLnByb3RvdHlwZSk7XG4gICAgdGhpcy5lcnJvckNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZ2V0Q29kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lcnJvckNvZGU7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFkZHJlc3NFcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBBRERSRVNTX0VSUk9SX0NPREUpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBBZGRyZXNzRXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgR29vc2VFZ2dDaGVja0Vycm9yIGV4dGVuZHMgQXZhbGFuY2hlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtOnN0cmluZykge1xuICAgIHN1cGVyKG0sIEdPT1NFX0VHR19DSEVDS19FUlJPUl9DT0RFKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgR29vc2VFZ2dDaGVja0Vycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENoYWluSWRFcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBDSEFJTl9JRF9FUlJPUl9DT0RFKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ2hhaW5JZEVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5vQXRvbWljVVRYT3NFcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBOT19BVE9NSVhfVVRYT1NfRVJST1JfQ09ERSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE5vQXRvbWljVVRYT3NFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTeW1ib2xFcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBTWU1CT0xfRVJST1JfQ09ERSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFN5bWJvbEVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5hbWVFcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBOQU1FX0VSUk9SX0NPREUpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBOYW1lRXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVHJhbnNhY3Rpb25FcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBUUkFOU0FDVElPTl9FUlJPUl9DT0RFKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgVHJhbnNhY3Rpb25FcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb2RlY0lkRXJyb3IgZXh0ZW5kcyBBdmFsYW5jaGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG06c3RyaW5nKSB7XG4gICAgc3VwZXIobSwgQ09ERUNfSURfRVJST1JfQ09ERSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENvZGVjSWRFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDcmVkSWRFcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBDUkVEX0lEX0VSUk9SX0NPREUpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDcmVkSWRFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2ZlcmFibGVPdXRwdXRFcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBUUkFOU0ZFUkFCTEVfT1VUUFVUX0VSUk9SX0NPREUpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUcmFuc2ZlcmFibGVPdXRwdXRFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2ZlcmFibGVJbnB1dEVycm9yIGV4dGVuZHMgQXZhbGFuY2hlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtOnN0cmluZykge1xuICAgIHN1cGVyKG0sIFRSQU5TRkVSQUJMRV9JTlBVVF9FUlJPUl9DT0RFKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgVHJhbnNmZXJhYmxlSW5wdXRFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnB1dElkRXJyb3IgZXh0ZW5kcyBBdmFsYW5jaGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG06c3RyaW5nKSB7XG4gICAgc3VwZXIobSwgSU5QVVRfSURfRVJST1JfQ09ERSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIElucHV0SWRFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBPcGVyYXRpb25FcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBPUEVSQVRJT05fRVJST1JfQ09ERSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE9wZXJhdGlvbkVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEludmFsaWRPcGVyYXRpb25JZEVycm9yIGV4dGVuZHMgQXZhbGFuY2hlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtOnN0cmluZykge1xuICAgIHN1cGVyKG0sIElOVkFMSURfT1BFUkFUSU9OX0lEX0NPREUpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkT3BlcmF0aW9uSWRFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDaGVja3N1bUVycm9yIGV4dGVuZHMgQXZhbGFuY2hlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtOnN0cmluZykge1xuICAgIHN1cGVyKG0sIENIRUNLU1VNX0VSUk9SX0NPREUpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDaGVja3N1bUVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE91dHB1dElkRXJyb3IgZXh0ZW5kcyBBdmFsYW5jaGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG06c3RyaW5nKSB7XG4gICAgc3VwZXIobSwgT1VUUFVUX0lEX0VSUk9SX0NPREUpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBPdXRwdXRJZEVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVUWE9FcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBVVFhPX0VSUk9SX0NPREUpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBVVFhPRXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW5zdWZmaWNpZW50RnVuZHNFcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBJTlNVRkZJQ0lFTlRfRlVORFNfRVJST1JfQ09ERSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEluc3VmZmljaWVudEZ1bmRzRXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGhyZXNob2xkRXJyb3IgZXh0ZW5kcyBBdmFsYW5jaGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG06c3RyaW5nKSB7XG4gICAgc3VwZXIobSwgVEhSRVNIT0xEX0VSUk9SX0NPREUpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUaHJlc2hvbGRFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTRUNQTWludE91dHB1dEVycm9yIGV4dGVuZHMgQXZhbGFuY2hlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtOnN0cmluZykge1xuICAgIHN1cGVyKG0sIFNFQ1BfTUlOVF9PVVRQVVRfRVJST1JfQ09ERSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFNFQ1BNaW50T3V0cHV0RXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRVZNSW5wdXRFcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBFVk1fSU5QVVRfRVJST1JfQ09ERSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEVWTUlucHV0RXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRVZNT3V0cHV0RXJyb3IgZXh0ZW5kcyBBdmFsYW5jaGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG06c3RyaW5nKSB7XG4gICAgc3VwZXIobSwgRVZNX09VVFBVVF9FUlJPUl9DT0RFKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgRVZNT3V0cHV0RXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRmVlQXNzZXRFcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBGRUVfQVNTRVRfRVJST1JfQ09ERSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEZlZUFzc2V0RXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3Rha2VFcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBTVEFLRV9FUlJPUl9DT0RFKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgU3Rha2VFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUaW1lRXJyb3IgZXh0ZW5kcyBBdmFsYW5jaGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG06c3RyaW5nKSB7XG4gICAgc3VwZXIobSwgVElNRV9FUlJPUl9DT0RFKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgVGltZUVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIERlbGVnYXRpb25GZWVFcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBERUxFR0FUSU9OX0ZFRV9FUlJPUl9DT0RFKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgRGVsZWdhdGlvbkZlZUVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN1Ym5ldE93bmVyRXJyb3IgZXh0ZW5kcyBBdmFsYW5jaGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG06c3RyaW5nKSB7XG4gICAgc3VwZXIobSwgU1VCTkVUX09XTkVSX0VSUk9SX0NPREUpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBTdWJuZXRPd25lckVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJ1ZmZlclNpemVFcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBCVUZGRVJfU0laRV9FUlJPUl9DT0RFKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQnVmZmVyU2l6ZUVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFkZHJlc3NJbmRleEVycm9yIGV4dGVuZHMgQXZhbGFuY2hlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtOnN0cmluZykge1xuICAgIHN1cGVyKG0sIEFERFJFU1NfSU5ERVhfRVJST1JfQ09ERSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEFkZHJlc3NJbmRleEVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFB1YmxpY0tleUVycm9yIGV4dGVuZHMgQXZhbGFuY2hlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtOnN0cmluZykge1xuICAgIHN1cGVyKG0sIFBVQkxJQ19LRVlfRVJST1JfQ09ERSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFB1YmxpY0tleUVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1lcmdlUnVsZUVycm9yIGV4dGVuZHMgQXZhbGFuY2hlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtOnN0cmluZykge1xuICAgIHN1cGVyKG0sIE1FUkdFX1JVTEVfRVJST1JfQ09ERSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE1lcmdlUnVsZUVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJhc2U1OEVycm9yIGV4dGVuZHMgQXZhbGFuY2hlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtOnN0cmluZykge1xuICAgIHN1cGVyKG0sIEJBU0U1OF9FUlJPUl9DT0RFKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQmFzZTU4RXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUHJpdmF0ZUtleUVycm9yIGV4dGVuZHMgQXZhbGFuY2hlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtOnN0cmluZykge1xuICAgIHN1cGVyKG0sIFBSSVZBVEVfS0VZX0VSUk9SX0NPREUpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBQcml2YXRlS2V5RXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTm9kZUlkRXJyb3IgZXh0ZW5kcyBBdmFsYW5jaGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG06c3RyaW5nKSB7XG4gICAgc3VwZXIobSwgTk9ERV9JRF9FUlJPUl9DT0RFKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTm9kZUlkRXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSGV4RXJyb3IgZXh0ZW5kcyBBdmFsYW5jaGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG06c3RyaW5nKSB7XG4gICAgc3VwZXIobSwgSEVYX0VSUk9SX0NPREUpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBIZXhFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUeXBlSWRFcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBUWVBFX0lEX0VSUk9SX0NPREUpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUeXBlSWRFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUeXBlTmFtZUVycm9yIGV4dGVuZHMgQXZhbGFuY2hlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtOnN0cmluZykge1xuICAgIHN1cGVyKG0sIFRZUEVfTkFNRV9FUlJPUl9DT0RFKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgVHlwZU5hbWVFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVbmtub3duVHlwZUVycm9yIGV4dGVuZHMgQXZhbGFuY2hlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtOnN0cmluZykge1xuICAgIHN1cGVyKG0sIFVOS05PV05fVFlQRV9FUlJPUl9DT0RFKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgVW5rbm93blR5cGVFcnJvci5wcm90b3R5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCZWNoMzJFcnJvciBleHRlbmRzIEF2YWxhbmNoZUVycm9yIHtcbiAgY29uc3RydWN0b3IobTpzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBCRUNIMzJfRVJST1JfQ09ERSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEJlY2gzMkVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVWTUZlZUVycm9yIGV4dGVuZHMgQXZhbGFuY2hlRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtLCBFVk1fRkVFX0VSUk9SX0NPREUpXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEVWTUZlZUVycm9yLnByb3RvdHlwZSlcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW52YWxpZEVudHJvcHkgZXh0ZW5kcyBBdmFsYW5jaGVFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG06IHN0cmluZykge1xuICAgIHN1cGVyKG0sIElOVkFMSURfRU5UUk9QWSlcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZEVudHJvcHkucHJvdG90eXBlKTtcbiAgfVxufVxuIl19