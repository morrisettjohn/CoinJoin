"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bintools_1 = __importDefault(require("src/utils/bintools"));
const bn_js_1 = __importDefault(require("bn.js"));
const buffer_1 = require("buffer/");
const bintools = bintools_1.default.getInstance();
describe('BinTools', () => {
    const hexstr = '00112233445566778899aabbccddeeff';
    const hexstr2 = '0001020304050607080909080706050403020100';
    const hexstr3 = '0001020304050607080909080706050403020101';
    const hexbuffstr1 = '000461736466'; // = asdf
    const hexbuffstr2 = '000761626364656667'; // = abcdefg
    const hexbuffstr3 = '00076f6b0066696e65'; // = ok<null>fineokfine
    const b58str = '1UoWww8DGaVGLtea7zU7p';
    const b58str2 = '1Bhh3pU9gLXZiJv73kmqZwHJ4F';
    const b58str3 = '1Bhh3pU9gLXZiJv73kmqZwHJ4G';
    const buff = buffer_1.Buffer.from(hexstr, 'hex');
    const buff2 = buffer_1.Buffer.from(hexstr2, 'hex');
    const buff3 = buffer_1.Buffer.from(hexstr3, 'hex');
    const checksum = '323e6811';
    const serializedChecksum = '148vjpuxYXixb8DcbaWyeDE2fEG'; // serialized hexstr + checksum
    test('copyFrom conducts a true copy', () => {
        const buff = buffer_1.Buffer.from(hexstr, 'hex');
        const newbuff = bintools.copyFrom(buff, 0, 10);
        expect(newbuff.length).toBe(10);
        expect(newbuff.readUInt8(0)).toBe(0);
        expect(newbuff.readUInt8(9)).toBe(153);
        // verify that the original buffer isn't touched by writes
        newbuff.writeUInt8(153, 4);
        expect(newbuff.readUInt8(4)).toBe(153);
        expect(buff.readUInt8(4)).toBe(68);
        // test with no end specified
        const newbuff2 = bintools.copyFrom(buff, 2);
        expect(newbuff2.length).toBe(14);
        expect(newbuff2.readUInt8(0)).toBe(34);
        expect(newbuff2.readUInt8(7)).toBe(153);
    });
    test('bufferToString', () => {
        const bres = bintools.bufferToString(buffer_1.Buffer.from(hexbuffstr1, 'hex'));
        expect(bres).toBe(buffer_1.Buffer.from(hexbuffstr1.slice(4), 'hex').toString('utf8'));
        // testing null character edge case
        const bres2 = bintools.bufferToString(buffer_1.Buffer.from(hexbuffstr2, 'hex'));
        expect(bres2).toBe(buffer_1.Buffer.from(hexbuffstr2.slice(4), 'hex').toString('utf8'));
        // testing null character edge case
        const bres3 = bintools.bufferToString(buffer_1.Buffer.from(hexbuffstr3, 'hex'));
        expect(bres3).toBe(buffer_1.Buffer.from(hexbuffstr3.slice(4), 'hex').toString('utf8'));
    });
    test('stringToBuffer', () => {
        const bres = bintools.stringToBuffer('asdf');
        expect(bres.slice(2).toString()).toBe(buffer_1.Buffer.from(hexbuffstr1.slice(4), 'hex').toString('utf8'));
        // testing null character edge case
        const bres2 = bintools.stringToBuffer('abcdefg');
        expect(bres2.slice(2).toString()).toBe(buffer_1.Buffer.from(hexbuffstr2.slice(4), 'hex').toString('utf8'));
        // testing null character edge case
        const bres3 = bintools.stringToBuffer(buffer_1.Buffer.from(hexbuffstr3.slice(4), 'hex').toString('utf8'));
        expect(bres3.slice(2).toString()).toBe(buffer_1.Buffer.from(hexbuffstr3.slice(4), 'hex').toString('utf8'));
    });
    test('bufferToB58', () => {
        const b58res = bintools.bufferToB58(buff);
        expect(b58res).toBe(b58str);
        // testing null character edge case
        const b58res2 = bintools.bufferToB58(buff2);
        expect(b58res2).toBe(b58str2);
        // testing null character edge case
        const b58res3 = bintools.bufferToB58(buff3);
        expect(b58res3).toBe(b58str3);
    });
    test('b58ToBuffer', () => {
        expect(() => {
            bintools.b58ToBuffer('0OO0O not a valid b58 string 0OO0O');
        }).toThrow('Error - Base58.decode: not a valid base58 string');
        const buffres = bintools.b58ToBuffer(b58str);
        expect(buffres.toString()).toBe(buff.toString());
        // testing zeros character edge case
        const buffres2 = bintools.b58ToBuffer(b58str2);
        expect(buffres2.toString()).toBe(buff2.toString());
        // testing zeros character edge case
        const buffres3 = bintools.b58ToBuffer(b58str3);
        expect(buffres3.toString()).toBe(buff3.toString());
    });
    test('fromBufferToArrayBuffer', () => {
        const arrbuff = bintools.fromBufferToArrayBuffer(buff);
        expect(arrbuff.byteLength).toBe(buff.length);
        for (let i = 0; i < buff.length; i++) {
            expect(arrbuff[i]).toBe(buff[i]);
        }
        // verify that the original buffer isn't touched by writes
        arrbuff[2] = 55;
        expect(buff[2]).not.toBe(55);
    });
    test('fromArrayBufferToBuffer', () => {
        const arrbuff = new ArrayBuffer(10);
        for (let i = 0; i < 10; i++) {
            arrbuff[i] = i;
        }
        const newbuff = bintools.fromArrayBufferToBuffer(arrbuff);
        expect(newbuff.length).toBe(arrbuff.byteLength);
        for (let i = 0; i < newbuff.length; i++) {
            expect(newbuff[i]).toBe(arrbuff[i]);
        }
        // verify that the original buffer isnt touched by writes
        newbuff[3] = 55;
        expect(arrbuff[3]).not.toBe(newbuff[3]);
    });
    test('fromBufferToBN', () => {
        const bign = bintools.fromBufferToBN(buff);
        expect(bign.toString('hex', hexstr.length)).toBe(hexstr);
    });
    test('fromBNToBuffer', () => {
        const bn1 = new bn_js_1.default(hexstr, 'hex', 'be');
        const bn2 = new bn_js_1.default(hexstr, 'hex', 'be');
        const b1 = bintools.fromBNToBuffer(bn1);
        const b2 = bintools.fromBNToBuffer(bn2, buff.length);
        expect(b1.length).toBe(buff.length - 1);
        expect(b1.toString('hex')).toBe(hexstr.slice(2));
        expect(b2.length).toBe(buff.length);
        expect(b2.toString('hex')).toBe(hexstr);
    });
    test('addChecksum', () => {
        const buffchecked = bintools.addChecksum(buff);
        expect(buffchecked.length).toBe(buff.length + 4);
        expect(buffchecked.slice(16).toString('hex')).toBe(checksum);
    });
    test('validteChecksum', () => {
        const checksummed = hexstr + checksum;
        const badsummed = `${hexstr}324e7822`;
        expect(bintools.validateChecksum(buffer_1.Buffer.from(checksummed, 'hex'))).toBe(true);
        expect(bintools.validateChecksum(buff)).toBe(false);
        expect(bintools.validateChecksum(buffer_1.Buffer.from(badsummed, 'hex'))).toBe(false);
    });
    test('cb58Encode', () => {
        const fromBuff = bintools.cb58Encode(buff);
        expect(fromBuff).toBe(serializedChecksum);
    });
    test('cb58Decode', () => {
        const serbuff = bintools.b58ToBuffer(serializedChecksum);
        const dsr1 = bintools.cb58Decode(serializedChecksum);
        const dsr2 = bintools.cb58Decode(serbuff);
        const serbufffaulty = bintools.copyFrom(serbuff);
        serbufffaulty[serbufffaulty.length - 1] = serbufffaulty[serbufffaulty.length - 1] - 1;
        expect(dsr1.toString('hex')).toBe(hexstr);
        expect(dsr2.toString('hex')).toBe(hexstr);
        expect(() => {
            bintools.cb58Decode(serbufffaulty);
        }).toThrow('Error - BinTools.cb58Decode: invalid checksum');
    });
    test('isCB58', () => {
        const validCB581 = "isGvtnDqETNmmFw7guSJ7mmWhCqboExrpmC8VsWxckHcH9oXb";
        const validCB582 = "2PwX8qwMHbwVAm28howu3Ef7Lk4ib2XG7AaY9aK8dTTGNXQkCz";
        const invalidCB581 = "ddd.tnDqETNmmFw7guSJ7mmWhCqboExrpmC8VsWxckHcHzzzz";
        const invalidCB582 = "";
        expect(bintools.isCB58(validCB581)).toBe(true);
        expect(bintools.isCB58(validCB582)).toBe(true);
        expect(bintools.isCB58(invalidCB581)).toBe(false);
        expect(bintools.isCB58(invalidCB582)).toBe(false);
    });
    test('isBase58', () => {
        const validBase581 = "isGvtnDqETNmmFw7guSJ7mmWhCqboExrpmC8VsWxckHcH9oXb";
        const validBase582 = "2PwX8qwMHbwVAm28howu3Ef7Lk4ib2XG7AaY9aK8dTTGNXQkCz";
        const invalidBase581 = "ddd.tnDqETNmmFw7guSJ7mmWhCqboExrpmC8VsWxckHcHzzzz";
        const invalidBase582 = "";
        expect(bintools.isBase58(validBase581)).toBe(true);
        expect(bintools.isBase58(validBase582)).toBe(true);
        expect(bintools.isBase58(invalidBase581)).toBe(false);
        expect(bintools.isBase58(invalidBase582)).toBe(false);
    });
    test('isHex', () => {
        const validHex1 = "0x95eaac2b7a6ee7ad7e597c2f5349b03e461c36c2e1e50fc98a84d01612940bd5";
        const validHex2 = "95eaac2b7a6ee7ad7e597c2f5349b03e461c36c2e1e50fc98a84d01612940bd5";
        const invalidHex1 = "rrrrr.c2b7a6ee7ad7e597c2f5349b03e461c36c2e1e5.fc98a84d016129zzzzz";
        const invalidHex2 = "";
        expect(bintools.isHex(validHex1)).toBe(true);
        expect(bintools.isHex(validHex2)).toBe(true);
        expect(bintools.isHex(invalidHex1)).toBe(false);
        expect(bintools.isHex(invalidHex2)).toBe(false);
    });
    test('stringToAddress', () => {
        // Missing prefix
        let addr = "-avax13a4ye34zdfa33zeg3udnz533d6msfuqkds9hq7";
        expect(() => {
            bintools.stringToAddress(addr);
        }).toThrow('Error - Valid address must have prefix before -');
        // Missing -
        addr = "Xavax13a4ye34zdfa33zeg3udnz533d6msfuqkds9hq7";
        expect(() => {
            bintools.stringToAddress(addr);
        }).toThrow('Error - Valid address should include -');
        // Missing seperator (1)
        addr = "X-avax3a4ye34zdfa33zeg3udnz533d6msfuqkds9hq7";
        expect(() => {
            bintools.stringToAddress(addr);
        }).toThrow('Error - Valid address must include separator (1)');
        // Missing HRP
        addr = "X-13a4ye34zdfa33zeg3udnz533d6msfuqkds9hq7";
        expect(() => {
            bintools.stringToAddress(addr);
        }).toThrow('Error - HRP should be at least 1 character');
        // Invalid HRP
        addr = "X-avax11ycxp65vz60m87mkm2hsw3m5fadjlpldzntvr33";
        expect(() => {
            bintools.stringToAddress(addr);
        }).toThrow('Error - Invalid HRP');
        // Extra character in data bytes
        addr = "X-local1dcfyuug87xqayl4fpp02z9dvknwhafdswtvnucd";
        expect(() => {
            bintools.stringToAddress(addr);
        }).toThrow('Invalid checksum for local1dcfyuug87xqayl4fpp02z9dvknwhafdswtvnucd');
        // Change character in data bytes
        addr = "X-local1dcfyuug8fxqayl4fpp02z9dvknwhafdstvnucd";
        expect(() => {
            bintools.stringToAddress(addr);
        }).toThrow('Invalid checksum for local1dcfyuug8fxqayl4fpp02z9dvknwhafdstvnucd');
        // Invalid character in data bytes
        addr = "X-local1dcfyuug87xqbyl4fpp02z9dvknwhafdstvnucd";
        expect(() => {
            bintools.stringToAddress(addr);
        }).toThrow('Unknown character b');
        // Change character in checksum
        addr = "X-local1dcfyuug87xqayl4fpp02z9dvknwhafdstvnuce";
        expect(() => {
            bintools.stringToAddress(addr);
        }).toThrow('Invalid checksum for local1dcfyuug87xqayl4fpp02z9dvknwhafdstvnuce');
        // Invalid ETH-style address
        addr = "0x.db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC";
        expect(() => {
            bintools.stringToAddress(addr);
        }).toThrow('Error - Invalid address');
        let addrs = [
            'X-local1dcfyuug87xqayl4fpp02z9dvknwhafdstvnucd',
            'X-local1ltghj033re64920k786uprcp82p9e36j7hzc5x',
            'X-local1dq4q9seql2spxrkd7rl82uck5ej3nvlhrluh4u'
        ];
        addrs.forEach((address) => {
            bintools.stringToAddress(address);
        });
        addrs = [
            'X-fuji1dcfyuug87xqayl4fpp02z9dvknwhafds7d29h6',
            'X-fuji1ltghj033re64920k786uprcp82p9e36jtkmpm3',
            'X-fuji1dq4q9seql2spxrkd7rl82uck5ej3nvlhk79w6t'
        ];
        addrs.forEach((address) => {
            bintools.stringToAddress(address);
        });
        addrs = [
            'X-avax1dcfyuug87xqayl4fpp02z9dvknwhafdsjlw6m9',
            'X-avax1ltghj033re64920k786uprcp82p9e36j8yl7hw',
            'X-avax1dq4q9seql2spxrkd7rl82uck5ej3nvlh6vp3k5'
        ];
        addrs.forEach((address) => {
            bintools.stringToAddress(address);
        });
        addrs = [
            'P-local1dcfyuug87xqayl4fpp02z9dvknwhafdstvnucd',
            'P-local1ltghj033re64920k786uprcp82p9e36j7hzc5x',
            'P-local1dq4q9seql2spxrkd7rl82uck5ej3nvlhrluh4u'
        ];
        addrs.forEach((address) => {
            bintools.stringToAddress(address);
        });
        addrs = [
            'P-fuji1dcfyuug87xqayl4fpp02z9dvknwhafds7d29h6',
            'P-fuji1ltghj033re64920k786uprcp82p9e36jtkmpm3',
            'P-fuji1dq4q9seql2spxrkd7rl82uck5ej3nvlhk79w6t'
        ];
        addrs.forEach((address) => {
            bintools.stringToAddress(address);
        });
        addrs = [
            'P-avax1dcfyuug87xqayl4fpp02z9dvknwhafdsjlw6m9',
            'P-avax1ltghj033re64920k786uprcp82p9e36j8yl7hw',
            'P-avax1dq4q9seql2spxrkd7rl82uck5ej3nvlh6vp3k5'
        ];
        addrs.forEach((address) => {
            bintools.stringToAddress(address);
        });
        addrs = [
            'C-local1dcfyuug87xqayl4fpp02z9dvknwhafdstvnucd',
            'C-local1ltghj033re64920k786uprcp82p9e36j7hzc5x',
            'C-local1dq4q9seql2spxrkd7rl82uck5ej3nvlhrluh4u'
        ];
        addrs.forEach((address) => {
            bintools.stringToAddress(address);
        });
        addrs = [
            'C-fuji1dcfyuug87xqayl4fpp02z9dvknwhafds7d29h6',
            'C-fuji1ltghj033re64920k786uprcp82p9e36jtkmpm3',
            'C-fuji1dq4q9seql2spxrkd7rl82uck5ej3nvlhk79w6t'
        ];
        addrs.forEach((address) => {
            bintools.stringToAddress(address);
        });
        addrs = [
            'C-avax1dcfyuug87xqayl4fpp02z9dvknwhafdsjlw6m9',
            'C-avax1ltghj033re64920k786uprcp82p9e36j8yl7hw',
            'C-avax1dq4q9seql2spxrkd7rl82uck5ej3nvlh6vp3k5'
        ];
        addrs.forEach((address) => {
            bintools.stringToAddress(address);
        });
        addrs = [
            "X-foo1dcfyuug87xqayl4fpp02z9dvknwhafds4k3km3",
            "X-foo1ltghj033re64920k786uprcp82p9e36jqdqjh6",
            "X-foo1dq4q9seql2spxrkd7rl82uck5ej3nvlha97akq"
        ];
        addrs.forEach((address) => {
            bintools.stringToAddress(address, "foo");
        });
        addrs = [
            "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC",
            "0xC1ad78FDd4aEd027EbD5e9eee878f44dc1E29358",
            "0x5B44bC2622dc5DD66a94cd5f2aDc3a49abb864dE"
        ];
        addrs.forEach((address) => {
            bintools.stringToAddress(address);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmludG9vbHMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3RzL3V0aWxzL2JpbnRvb2xzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrRUFBMEM7QUFDMUMsa0RBQXVCO0FBQ3ZCLG9DQUFpQztBQUVqQyxNQUFNLFFBQVEsR0FBRyxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBRXhDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO0lBQ3hCLE1BQU0sTUFBTSxHQUFVLGtDQUFrQyxDQUFDO0lBQ3pELE1BQU0sT0FBTyxHQUFVLDBDQUEwQyxDQUFDO0lBQ2xFLE1BQU0sT0FBTyxHQUFVLDBDQUEwQyxDQUFDO0lBQ2xFLE1BQU0sV0FBVyxHQUFVLGNBQWMsQ0FBQyxDQUFDLFNBQVM7SUFDcEQsTUFBTSxXQUFXLEdBQVUsb0JBQW9CLENBQUMsQ0FBQyxZQUFZO0lBQzdELE1BQU0sV0FBVyxHQUFVLG9CQUFvQixDQUFDLENBQUMsdUJBQXVCO0lBQ3hFLE1BQU0sTUFBTSxHQUFVLHVCQUF1QixDQUFDO0lBQzlDLE1BQU0sT0FBTyxHQUFVLDRCQUE0QixDQUFDO0lBQ3BELE1BQU0sT0FBTyxHQUFVLDRCQUE0QixDQUFDO0lBQ3BELE1BQU0sSUFBSSxHQUFVLGVBQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9DLE1BQU0sS0FBSyxHQUFVLGVBQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2pELE1BQU0sS0FBSyxHQUFVLGVBQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2pELE1BQU0sUUFBUSxHQUFVLFVBQVUsQ0FBQztJQUNuQyxNQUFNLGtCQUFrQixHQUFVLDZCQUE2QixDQUFDLENBQUMsK0JBQStCO0lBQ2hHLElBQUksQ0FBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUU7UUFDekMsTUFBTSxJQUFJLEdBQVUsZUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0MsTUFBTSxPQUFPLEdBQVUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLDBEQUEwRDtRQUMxRCxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNuQyw2QkFBNkI7UUFDN0IsTUFBTSxRQUFRLEdBQVUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbkQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO1FBQzFCLE1BQU0sSUFBSSxHQUFVLFFBQVEsQ0FBQyxjQUFjLENBQUMsZUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM3RSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUM3RSxtQ0FBbUM7UUFDbkMsTUFBTSxLQUFLLEdBQVUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxlQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzlFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQzlFLG1DQUFtQztRQUNuQyxNQUFNLEtBQUssR0FBVSxRQUFRLENBQUMsY0FBYyxDQUFDLGVBQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDOUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDaEYsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO1FBQzFCLE1BQU0sSUFBSSxHQUFVLFFBQVEsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEQs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Q0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLCtDQUErQyxDQUFDLENBQUM7SUFDOUQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQVMsRUFBRTtRQUN4QixNQUFNLFVBQVUsR0FBVyxtREFBbUQsQ0FBQTtRQUM5RSxNQUFNLFVBQVUsR0FBVyxvREFBb0QsQ0FBQTtRQUMvRSxNQUFNLFlBQVksR0FBVyxtREFBbUQsQ0FBQTtRQUNoRixNQUFNLFlBQVksR0FBVyxFQUFFLENBQUE7UUFDL0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDOUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDOUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDakQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDbkQsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFJLENBQUMsVUFBVSxFQUFFLEdBQVMsRUFBRTtRQUMxQixNQUFNLFlBQVksR0FBVyxtREFBbUQsQ0FBQTtRQUNoRixNQUFNLFlBQVksR0FBVyxvREFBb0QsQ0FBQTtRQUNqRixNQUFNLGNBQWMsR0FBVyxtREFBbUQsQ0FBQTtRQUNsRixNQUFNLGNBQWMsR0FBVyxFQUFFLENBQUE7UUFDakMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDbEQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFD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Q0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFlLEVBQVEsRUFBRTtZQUN0QyxRQUFRLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO1FBRUgsS0FBSyxHQUFHO1lBQ04sK0NBQStDO1lBQy9DLCtDQUErQztZQUMvQywrQ0FBK0M7U0FDaEQsQ0FBQztRQUNGLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFlLEVBQVEsRUFBRTtZQUN0QyxRQUFRLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO1FBRUgsS0FBSyxHQUFHO1lBQ04sOENBQThDO1lBQzlDLDhDQUE4QztZQUM5Qyw4Q0FBOEM7U0FDL0MsQ0FBQTtRQUNELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFlLEVBQVEsRUFBRTtZQUN0QyxRQUFRLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztRQUVILEtBQUssR0FBRztZQUNOLDRDQUE0QztZQUM1Qyw0Q0FBNEM7WUFDNUMsNENBQTRDO1NBQzdDLENBQUE7UUFDRCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBZSxFQUFRLEVBQUU7WUFDdEMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmluVG9vbHMgZnJvbSAnc3JjL3V0aWxzL2JpbnRvb2xzJztcbmltcG9ydCBCTiBmcm9tICdibi5qcyc7XG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXIvJztcblxuY29uc3QgYmludG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpO1xuXG5kZXNjcmliZSgnQmluVG9vbHMnLCAoKSA9PiB7XG4gIGNvbnN0IGhleHN0cjpzdHJpbmcgPSAnMDAxMTIyMzM0NDU1NjY3Nzg4OTlhYWJiY2NkZGVlZmYnO1xuICBjb25zdCBoZXhzdHIyOnN0cmluZyA9ICcwMDAxMDIwMzA0MDUwNjA3MDgwOTA5MDgwNzA2MDUwNDAzMDIwMTAwJztcbiAgY29uc3QgaGV4c3RyMzpzdHJpbmcgPSAnMDAwMTAyMDMwNDA1MDYwNzA4MDkwOTA4MDcwNjA1MDQwMzAyMDEwMSc7XG4gIGNvbnN0IGhleGJ1ZmZzdHIxOnN0cmluZyA9ICcwMDA0NjE3MzY0NjYnOyAvLyA9IGFzZGZcbiAgY29uc3QgaGV4YnVmZnN0cjI6c3RyaW5nID0gJzAwMDc2MTYyNjM2NDY1NjY2Nyc7IC8vID0gYWJjZGVmZ1xuICBjb25zdCBoZXhidWZmc3RyMzpzdHJpbmcgPSAnMDAwNzZmNmIwMDY2Njk2ZTY1JzsgLy8gPSBvazxudWxsPmZpbmVva2ZpbmVcbiAgY29uc3QgYjU4c3RyOnN0cmluZyA9ICcxVW9Xd3c4REdhVkdMdGVhN3pVN3AnO1xuICBjb25zdCBiNThzdHIyOnN0cmluZyA9ICcxQmhoM3BVOWdMWFppSnY3M2ttcVp3SEo0Ric7XG4gIGNvbnN0IGI1OHN0cjM6c3RyaW5nID0gJzFCaGgzcFU5Z0xYWmlKdjcza21xWndISjRHJztcbiAgY29uc3QgYnVmZjpCdWZmZXIgPSBCdWZmZXIuZnJvbShoZXhzdHIsICdoZXgnKTtcbiAgY29uc3QgYnVmZjI6QnVmZmVyID0gQnVmZmVyLmZyb20oaGV4c3RyMiwgJ2hleCcpO1xuICBjb25zdCBidWZmMzpCdWZmZXIgPSBCdWZmZXIuZnJvbShoZXhzdHIzLCAnaGV4Jyk7XG4gIGNvbnN0IGNoZWNrc3VtOnN0cmluZyA9ICczMjNlNjgxMSc7XG4gIGNvbnN0IHNlcmlhbGl6ZWRDaGVja3N1bTpzdHJpbmcgPSAnMTQ4dmpwdXhZWGl4YjhEY2JhV3llREUyZkVHJzsgLy8gc2VyaWFsaXplZCBoZXhzdHIgKyBjaGVja3N1bVxuICB0ZXN0KCdjb3B5RnJvbSBjb25kdWN0cyBhIHRydWUgY29weScsICgpID0+IHtcbiAgICBjb25zdCBidWZmOkJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGhleHN0ciwgJ2hleCcpO1xuICAgIGNvbnN0IG5ld2J1ZmY6QnVmZmVyID0gYmludG9vbHMuY29weUZyb20oYnVmZiwgMCwgMTApO1xuICAgIGV4cGVjdChuZXdidWZmLmxlbmd0aCkudG9CZSgxMCk7XG4gICAgZXhwZWN0KG5ld2J1ZmYucmVhZFVJbnQ4KDApKS50b0JlKDApO1xuICAgIGV4cGVjdChuZXdidWZmLnJlYWRVSW50OCg5KSkudG9CZSgxNTMpO1xuICAgIC8vIHZlcmlmeSB0aGF0IHRoZSBvcmlnaW5hbCBidWZmZXIgaXNuJ3QgdG91Y2hlZCBieSB3cml0ZXNcbiAgICBuZXdidWZmLndyaXRlVUludDgoMTUzLCA0KTtcbiAgICBleHBlY3QobmV3YnVmZi5yZWFkVUludDgoNCkpLnRvQmUoMTUzKTtcbiAgICBleHBlY3QoYnVmZi5yZWFkVUludDgoNCkpLnRvQmUoNjgpO1xuICAgIC8vIHRlc3Qgd2l0aCBubyBlbmQgc3BlY2lmaWVkXG4gICAgY29uc3QgbmV3YnVmZjI6QnVmZmVyID0gYmludG9vbHMuY29weUZyb20oYnVmZiwgMik7XG4gICAgZXhwZWN0KG5ld2J1ZmYyLmxlbmd0aCkudG9CZSgxNCk7XG4gICAgZXhwZWN0KG5ld2J1ZmYyLnJlYWRVSW50OCgwKSkudG9CZSgzNCk7XG4gICAgZXhwZWN0KG5ld2J1ZmYyLnJlYWRVSW50OCg3KSkudG9CZSgxNTMpO1xuICB9KTtcblxuICB0ZXN0KCdidWZmZXJUb1N0cmluZycsICgpID0+IHtcbiAgICBjb25zdCBicmVzOnN0cmluZyA9IGJpbnRvb2xzLmJ1ZmZlclRvU3RyaW5nKEJ1ZmZlci5mcm9tKGhleGJ1ZmZzdHIxLCAnaGV4JykpO1xuICAgIGV4cGVjdChicmVzKS50b0JlKEJ1ZmZlci5mcm9tKGhleGJ1ZmZzdHIxLnNsaWNlKDQpLCAnaGV4JykudG9TdHJpbmcoJ3V0ZjgnKSk7XG4gICAgLy8gdGVzdGluZyBudWxsIGNoYXJhY3RlciBlZGdlIGNhc2VcbiAgICBjb25zdCBicmVzMjpzdHJpbmcgPSBiaW50b29scy5idWZmZXJUb1N0cmluZyhCdWZmZXIuZnJvbShoZXhidWZmc3RyMiwgJ2hleCcpKTtcbiAgICBleHBlY3QoYnJlczIpLnRvQmUoQnVmZmVyLmZyb20oaGV4YnVmZnN0cjIuc2xpY2UoNCksICdoZXgnKS50b1N0cmluZygndXRmOCcpKTtcbiAgICAvLyB0ZXN0aW5nIG51bGwgY2hhcmFjdGVyIGVkZ2UgY2FzZVxuICAgIGNvbnN0IGJyZXMzOnN0cmluZyA9IGJpbnRvb2xzLmJ1ZmZlclRvU3RyaW5nKEJ1ZmZlci5mcm9tKGhleGJ1ZmZzdHIzLCAnaGV4JykpO1xuICAgIGV4cGVjdChicmVzMykudG9CZShCdWZmZXIuZnJvbShoZXhidWZmc3RyMy5zbGljZSg0KSwgJ2hleCcpLnRvU3RyaW5nKCd1dGY4JykpO1xuICB9KTtcblxuICB0ZXN0KCdzdHJpbmdUb0J1ZmZlcicsICgpID0+IHtcbiAgICBjb25zdCBicmVzOkJ1ZmZlciA9IGJpbnRvb2xzLnN0cmluZ1RvQnVmZmVyKCdhc2RmJyk7XG4gICAgZXhwZWN0KGJyZXMuc2xpY2UoMikudG9TdHJpbmcoKSkudG9CZShCdWZmZXIuZnJvbShoZXhidWZmc3RyMS5zbGljZSg0KSwgJ2hleCcpLnRvU3RyaW5nKCd1dGY4JykpO1xuICAgIC8vIHRlc3RpbmcgbnVsbCBjaGFyYWN0ZXIgZWRnZSBjYXNlXG4gICAgY29uc3QgYnJlczI6QnVmZmVyID0gYmludG9vbHMuc3RyaW5nVG9CdWZmZXIoJ2FiY2RlZmcnKTtcbiAgICBleHBlY3QoYnJlczIuc2xpY2UoMikudG9TdHJpbmcoKSkudG9CZShCdWZmZXIuZnJvbShoZXhidWZmc3RyMi5zbGljZSg0KSwgJ2hleCcpLnRvU3RyaW5nKCd1dGY4JykpO1xuICAgIC8vIHRlc3RpbmcgbnVsbCBjaGFyYWN0ZXIgZWRnZSBjYXNlXG4gICAgY29uc3QgYnJlczM6QnVmZmVyID0gYmludG9vbHMuc3RyaW5nVG9CdWZmZXIoQnVmZmVyLmZyb20oaGV4YnVmZnN0cjMuc2xpY2UoNCksICdoZXgnKS50b1N0cmluZygndXRmOCcpKTtcbiAgICBleHBlY3QoYnJlczMuc2xpY2UoMikudG9TdHJpbmcoKSkudG9CZShCdWZmZXIuZnJvbShoZXhidWZmc3RyMy5zbGljZSg0KSwgJ2hleCcpLnRvU3RyaW5nKCd1dGY4JykpO1xuICB9KTtcblxuICB0ZXN0KCdidWZmZXJUb0I1OCcsICgpID0+IHtcbiAgICBjb25zdCBiNThyZXM6c3RyaW5nID0gYmludG9vbHMuYnVmZmVyVG9CNTgoYnVmZik7XG4gICAgZXhwZWN0KGI1OHJlcykudG9CZShiNThzdHIpO1xuICAgIC8vIHRlc3RpbmcgbnVsbCBjaGFyYWN0ZXIgZWRnZSBjYXNlXG4gICAgY29uc3QgYjU4cmVzMjpzdHJpbmcgPSBiaW50b29scy5idWZmZXJUb0I1OChidWZmMik7XG4gICAgZXhwZWN0KGI1OHJlczIpLnRvQmUoYjU4c3RyMik7XG4gICAgLy8gdGVzdGluZyBudWxsIGNoYXJhY3RlciBlZGdlIGNhc2VcbiAgICBjb25zdCBiNThyZXMzOnN0cmluZyA9IGJpbnRvb2xzLmJ1ZmZlclRvQjU4KGJ1ZmYzKTtcbiAgICBleHBlY3QoYjU4cmVzMykudG9CZShiNThzdHIzKTtcbiAgfSk7XG5cbiAgdGVzdCgnYjU4VG9CdWZmZXInLCAoKSA9PiB7XG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIGJpbnRvb2xzLmI1OFRvQnVmZmVyKCcwT08wTyBub3QgYSB2YWxpZCBiNTggc3RyaW5nIDBPTzBPJyk7XG4gICAgfSkudG9UaHJvdygnRXJyb3IgLSBCYXNlNTguZGVjb2RlOiBub3QgYSB2YWxpZCBiYXNlNTggc3RyaW5nJyk7XG5cbiAgICBjb25zdCBidWZmcmVzOkJ1ZmZlciA9IGJpbnRvb2xzLmI1OFRvQnVmZmVyKGI1OHN0cik7XG4gICAgZXhwZWN0KGJ1ZmZyZXMudG9TdHJpbmcoKSkudG9CZShidWZmLnRvU3RyaW5nKCkpO1xuICAgIC8vIHRlc3RpbmcgemVyb3MgY2hhcmFjdGVyIGVkZ2UgY2FzZVxuICAgIGNvbnN0IGJ1ZmZyZXMyOkJ1ZmZlciA9IGJpbnRvb2xzLmI1OFRvQnVmZmVyKGI1OHN0cjIpO1xuICAgIGV4cGVjdChidWZmcmVzMi50b1N0cmluZygpKS50b0JlKGJ1ZmYyLnRvU3RyaW5nKCkpO1xuICAgIC8vIHRlc3RpbmcgemVyb3MgY2hhcmFjdGVyIGVkZ2UgY2FzZVxuICAgIGNvbnN0IGJ1ZmZyZXMzOkJ1ZmZlciA9IGJpbnRvb2xzLmI1OFRvQnVmZmVyKGI1OHN0cjMpO1xuICAgIGV4cGVjdChidWZmcmVzMy50b1N0cmluZygpKS50b0JlKGJ1ZmYzLnRvU3RyaW5nKCkpO1xuICB9KTtcblxuICB0ZXN0KCdmcm9tQnVmZmVyVG9BcnJheUJ1ZmZlcicsICgpID0+IHtcbiAgICBjb25zdCBhcnJidWZmOkFycmF5QnVmZmVyID0gYmludG9vbHMuZnJvbUJ1ZmZlclRvQXJyYXlCdWZmZXIoYnVmZik7XG4gICAgZXhwZWN0KGFycmJ1ZmYuYnl0ZUxlbmd0aCkudG9CZShidWZmLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaTpudW1iZXIgPSAwOyBpIDwgYnVmZi5sZW5ndGg7IGkrKykge1xuICAgICAgZXhwZWN0KGFycmJ1ZmZbaV0pLnRvQmUoYnVmZltpXSk7XG4gICAgfVxuICAgIC8vIHZlcmlmeSB0aGF0IHRoZSBvcmlnaW5hbCBidWZmZXIgaXNuJ3QgdG91Y2hlZCBieSB3cml0ZXNcbiAgICBhcnJidWZmWzJdID0gNTU7XG4gICAgZXhwZWN0KGJ1ZmZbMl0pLm5vdC50b0JlKDU1KTtcbiAgfSk7XG5cbiAgdGVzdCgnZnJvbUFycmF5QnVmZmVyVG9CdWZmZXInLCAoKSA9PiB7XG4gICAgY29uc3QgYXJyYnVmZjpBcnJheUJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigxMCk7XG4gICAgZm9yIChsZXQgaTpudW1iZXIgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgYXJyYnVmZltpXSA9IGk7XG4gICAgfVxuICAgIGNvbnN0IG5ld2J1ZmY6QnVmZmVyID0gYmludG9vbHMuZnJvbUFycmF5QnVmZmVyVG9CdWZmZXIoYXJyYnVmZik7XG4gICAgZXhwZWN0KG5ld2J1ZmYubGVuZ3RoKS50b0JlKGFycmJ1ZmYuYnl0ZUxlbmd0aCk7XG4gICAgZm9yIChsZXQgaTpudW1iZXIgPSAwOyBpIDwgbmV3YnVmZi5sZW5ndGg7IGkrKykge1xuICAgICAgZXhwZWN0KG5ld2J1ZmZbaV0pLnRvQmUoYXJyYnVmZltpXSk7XG4gICAgfVxuICAgIC8vIHZlcmlmeSB0aGF0IHRoZSBvcmlnaW5hbCBidWZmZXIgaXNudCB0b3VjaGVkIGJ5IHdyaXRlc1xuICAgIG5ld2J1ZmZbM10gPSA1NTtcbiAgICBleHBlY3QoYXJyYnVmZlszXSkubm90LnRvQmUobmV3YnVmZlszXSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Zyb21CdWZmZXJUb0JOJywgKCkgPT4ge1xuICAgIGNvbnN0IGJpZ246Qk4gPSBiaW50b29scy5mcm9tQnVmZmVyVG9CTihidWZmKTtcbiAgICBleHBlY3QoYmlnbi50b1N0cmluZygnaGV4JywgaGV4c3RyLmxlbmd0aCkpLnRvQmUoaGV4c3RyKTtcbiAgfSk7XG5cbiAgdGVzdCgnZnJvbUJOVG9CdWZmZXInLCAoKSA9PiB7XG4gICAgY29uc3QgYm4xOkJOID0gbmV3IEJOKGhleHN0ciwgJ2hleCcsICdiZScpO1xuICAgIGNvbnN0IGJuMjpCTiA9IG5ldyBCTihoZXhzdHIsICdoZXgnLCAnYmUnKTtcbiAgICBjb25zdCBiMTpCdWZmZXIgPSBiaW50b29scy5mcm9tQk5Ub0J1ZmZlcihibjEpO1xuICAgIGNvbnN0IGIyOkJ1ZmZlciA9IGJpbnRvb2xzLmZyb21CTlRvQnVmZmVyKGJuMiwgYnVmZi5sZW5ndGgpO1xuXG4gICAgZXhwZWN0KGIxLmxlbmd0aCkudG9CZShidWZmLmxlbmd0aCAtIDEpO1xuICAgIGV4cGVjdChiMS50b1N0cmluZygnaGV4JykpLnRvQmUoaGV4c3RyLnNsaWNlKDIpKTtcblxuICAgIGV4cGVjdChiMi5sZW5ndGgpLnRvQmUoYnVmZi5sZW5ndGgpO1xuICAgIGV4cGVjdChiMi50b1N0cmluZygnaGV4JykpLnRvQmUoaGV4c3RyKTtcbiAgfSk7XG5cbiAgdGVzdCgnYWRkQ2hlY2tzdW0nLCAoKSA9PiB7XG4gICAgY29uc3QgYnVmZmNoZWNrZWQ6QnVmZmVyID0gYmludG9vbHMuYWRkQ2hlY2tzdW0oYnVmZik7XG4gICAgZXhwZWN0KGJ1ZmZjaGVja2VkLmxlbmd0aCkudG9CZShidWZmLmxlbmd0aCArIDQpO1xuICAgIGV4cGVjdChidWZmY2hlY2tlZC5zbGljZSgxNikudG9TdHJpbmcoJ2hleCcpKS50b0JlKGNoZWNrc3VtKTtcbiAgfSk7XG5cbiAgdGVzdCgndmFsaWR0ZUNoZWNrc3VtJywgKCkgPT4ge1xuICAgIGNvbnN0IGNoZWNrc3VtbWVkOnN0cmluZyA9IGhleHN0ciArIGNoZWNrc3VtO1xuICAgIGNvbnN0IGJhZHN1bW1lZDpzdHJpbmcgPSBgJHtoZXhzdHJ9MzI0ZTc4MjJgO1xuICAgIGV4cGVjdChiaW50b29scy52YWxpZGF0ZUNoZWNrc3VtKEJ1ZmZlci5mcm9tKGNoZWNrc3VtbWVkLCAnaGV4JykpKS50b0JlKHRydWUpO1xuICAgIGV4cGVjdChiaW50b29scy52YWxpZGF0ZUNoZWNrc3VtKGJ1ZmYpKS50b0JlKGZhbHNlKTtcbiAgICBleHBlY3QoYmludG9vbHMudmFsaWRhdGVDaGVja3N1bShCdWZmZXIuZnJvbShiYWRzdW1tZWQsICdoZXgnKSkpLnRvQmUoZmFsc2UpO1xuICB9KTtcblxuICB0ZXN0KCdjYjU4RW5jb2RlJywgKCkgPT4ge1xuICAgIGNvbnN0IGZyb21CdWZmOnN0cmluZyA9IGJpbnRvb2xzLmNiNThFbmNvZGUoYnVmZik7XG4gICAgZXhwZWN0KGZyb21CdWZmKS50b0JlKHNlcmlhbGl6ZWRDaGVja3N1bSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2NiNThEZWNvZGUnLCAoKSA9PiB7XG4gICAgY29uc3Qgc2VyYnVmZjpCdWZmZXIgPSBiaW50b29scy5iNThUb0J1ZmZlcihzZXJpYWxpemVkQ2hlY2tzdW0pO1xuICAgIGNvbnN0IGRzcjE6QnVmZmVyID0gYmludG9vbHMuY2I1OERlY29kZShzZXJpYWxpemVkQ2hlY2tzdW0pO1xuICAgIGNvbnN0IGRzcjI6QnVmZmVyID0gYmludG9vbHMuY2I1OERlY29kZShzZXJidWZmKTtcbiAgICBjb25zdCBzZXJidWZmZmF1bHR5OkJ1ZmZlciA9IGJpbnRvb2xzLmNvcHlGcm9tKHNlcmJ1ZmYpO1xuICAgIHNlcmJ1ZmZmYXVsdHlbc2VyYnVmZmZhdWx0eS5sZW5ndGggLSAxXSA9IHNlcmJ1ZmZmYXVsdHlbc2VyYnVmZmZhdWx0eS5sZW5ndGggLSAxXSAtIDE7XG4gICAgZXhwZWN0KGRzcjEudG9TdHJpbmcoJ2hleCcpKS50b0JlKGhleHN0cik7XG4gICAgZXhwZWN0KGRzcjIudG9TdHJpbmcoJ2hleCcpKS50b0JlKGhleHN0cik7XG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIGJpbnRvb2xzLmNiNThEZWNvZGUoc2VyYnVmZmZhdWx0eSk7XG4gICAgfSkudG9UaHJvdygnRXJyb3IgLSBCaW5Ub29scy5jYjU4RGVjb2RlOiBpbnZhbGlkIGNoZWNrc3VtJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2lzQ0I1OCcsICgpOiB2b2lkID0+IHtcbiAgICBjb25zdCB2YWxpZENCNTgxOiBzdHJpbmcgPSBcImlzR3Z0bkRxRVRObW1GdzdndVNKN21tV2hDcWJvRXhycG1DOFZzV3hja0hjSDlvWGJcIlxuICAgIGNvbnN0IHZhbGlkQ0I1ODI6IHN0cmluZyA9IFwiMlB3WDhxd01IYndWQW0yOGhvd3UzRWY3TGs0aWIyWEc3QWFZOWFLOGRUVEdOWFFrQ3pcIlxuICAgIGNvbnN0IGludmFsaWRDQjU4MTogc3RyaW5nID0gXCJkZGQudG5EcUVUTm1tRnc3Z3VTSjdtbVdoQ3Fib0V4cnBtQzhWc1d4Y2tIY0h6enp6XCJcbiAgICBjb25zdCBpbnZhbGlkQ0I1ODI6IHN0cmluZyA9IFwiXCJcbiAgICBleHBlY3QoYmludG9vbHMuaXNDQjU4KHZhbGlkQ0I1ODEpKS50b0JlKHRydWUpXG4gICAgZXhwZWN0KGJpbnRvb2xzLmlzQ0I1OCh2YWxpZENCNTgyKSkudG9CZSh0cnVlKVxuICAgIGV4cGVjdChiaW50b29scy5pc0NCNTgoaW52YWxpZENCNTgxKSkudG9CZShmYWxzZSlcbiAgICBleHBlY3QoYmludG9vbHMuaXNDQjU4KGludmFsaWRDQjU4MikpLnRvQmUoZmFsc2UpXG4gIH0pXG5cbiAgdGVzdCgnaXNCYXNlNTgnLCAoKTogdm9pZCA9PiB7XG4gICAgY29uc3QgdmFsaWRCYXNlNTgxOiBzdHJpbmcgPSBcImlzR3Z0bkRxRVRObW1GdzdndVNKN21tV2hDcWJvRXhycG1DOFZzV3hja0hjSDlvWGJcIlxuICAgIGNvbnN0IHZhbGlkQmFzZTU4Mjogc3RyaW5nID0gXCIyUHdYOHF3TUhid1ZBbTI4aG93dTNFZjdMazRpYjJYRzdBYVk5YUs4ZFRUR05YUWtDelwiXG4gICAgY29uc3QgaW52YWxpZEJhc2U1ODE6IHN0cmluZyA9IFwiZGRkLnRuRHFFVE5tbUZ3N2d1U0o3bW1XaENxYm9FeHJwbUM4VnNXeGNrSGNIenp6elwiXG4gICAgY29uc3QgaW52YWxpZEJhc2U1ODI6IHN0cmluZyA9IFwiXCJcbiAgICBleHBlY3QoYmludG9vbHMuaXNCYXNlNTgodmFsaWRCYXNlNTgxKSkudG9CZSh0cnVlKVxuICAgIGV4cGVjdChiaW50b29scy5pc0Jhc2U1OCh2YWxpZEJhc2U1ODIpKS50b0JlKHRydWUpXG4gICAgZXhwZWN0KGJpbnRvb2xzLmlzQmFzZTU4KGludmFsaWRCYXNlNTgxKSkudG9CZShmYWxzZSlcbiAgICBleHBlY3QoYmludG9vbHMuaXNCYXNlNTgoaW52YWxpZEJhc2U1ODIpKS50b0JlKGZhbHNlKVxuICB9KVxuXG4gIHRlc3QoJ2lzSGV4JywgKCk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IHZhbGlkSGV4MTogc3RyaW5nID0gXCIweDk1ZWFhYzJiN2E2ZWU3YWQ3ZTU5N2MyZjUzNDliMDNlNDYxYzM2YzJlMWU1MGZjOThhODRkMDE2MTI5NDBiZDVcIlxuICAgIGNvbnN0IHZhbGlkSGV4Mjogc3RyaW5nID0gXCI5NWVhYWMyYjdhNmVlN2FkN2U1OTdjMmY1MzQ5YjAzZTQ2MWMzNmMyZTFlNTBmYzk4YTg0ZDAxNjEyOTQwYmQ1XCJcbiAgICBjb25zdCBpbnZhbGlkSGV4MTogc3RyaW5nID0gXCJycnJyci5jMmI3YTZlZTdhZDdlNTk3YzJmNTM0OWIwM2U0NjFjMzZjMmUxZTUuZmM5OGE4NGQwMTYxMjl6enp6elwiXG4gICAgY29uc3QgaW52YWxpZEhleDI6IHN0cmluZyA9IFwiXCJcbiAgICBleHBlY3QoYmludG9vbHMuaXNIZXgodmFsaWRIZXgxKSkudG9CZSh0cnVlKVxuICAgIGV4cGVjdChiaW50b29scy5pc0hleCh2YWxpZEhleDIpKS50b0JlKHRydWUpXG4gICAgZXhwZWN0KGJpbnRvb2xzLmlzSGV4KGludmFsaWRIZXgxKSkudG9CZShmYWxzZSlcbiAgICBleHBlY3QoYmludG9vbHMuaXNIZXgoaW52YWxpZEhleDIpKS50b0JlKGZhbHNlKVxuICB9KTtcblxuICB0ZXN0KCdzdHJpbmdUb0FkZHJlc3MnLCAoKSA9PiB7XG4gICAgLy8gTWlzc2luZyBwcmVmaXhcbiAgICBsZXQgYWRkcjogc3RyaW5nID0gXCItYXZheDEzYTR5ZTM0emRmYTMzemVnM3Vkbno1MzNkNm1zZnVxa2RzOWhxN1wiO1xuICAgIGV4cGVjdCgoKTogdm9pZCA9PiB7XG4gICAgICBiaW50b29scy5zdHJpbmdUb0FkZHJlc3MoYWRkcik7XG4gICAgfSkudG9UaHJvdygnRXJyb3IgLSBWYWxpZCBhZGRyZXNzIG11c3QgaGF2ZSBwcmVmaXggYmVmb3JlIC0nKTtcblxuICAgIC8vIE1pc3NpbmcgLVxuICAgIGFkZHIgPSBcIlhhdmF4MTNhNHllMzR6ZGZhMzN6ZWczdWRuejUzM2Q2bXNmdXFrZHM5aHE3XCI7XG4gICAgZXhwZWN0KCgpOiB2b2lkID0+IHtcbiAgICAgIGJpbnRvb2xzLnN0cmluZ1RvQWRkcmVzcyhhZGRyKTtcbiAgICB9KS50b1Rocm93KCdFcnJvciAtIFZhbGlkIGFkZHJlc3Mgc2hvdWxkIGluY2x1ZGUgLScpO1xuXG4gICAgLy8gTWlzc2luZyBzZXBlcmF0b3IgKDEpXG4gICAgYWRkciA9IFwiWC1hdmF4M2E0eWUzNHpkZmEzM3plZzN1ZG56NTMzZDZtc2Z1cWtkczlocTdcIjtcbiAgICBleHBlY3QoKCk6IHZvaWQgPT4ge1xuICAgICAgYmludG9vbHMuc3RyaW5nVG9BZGRyZXNzKGFkZHIpO1xuICAgIH0pLnRvVGhyb3coJ0Vycm9yIC0gVmFsaWQgYWRkcmVzcyBtdXN0IGluY2x1ZGUgc2VwYXJhdG9yICgxKScpO1xuXG4gICAgLy8gTWlzc2luZyBIUlBcbiAgICBhZGRyID0gXCJYLTEzYTR5ZTM0emRmYTMzemVnM3Vkbno1MzNkNm1zZnVxa2RzOWhxN1wiO1xuICAgIGV4cGVjdCgoKTogdm9pZCA9PiB7XG4gICAgICBiaW50b29scy5zdHJpbmdUb0FkZHJlc3MoYWRkcik7XG4gICAgfSkudG9UaHJvdygnRXJyb3IgLSBIUlAgc2hvdWxkIGJlIGF0IGxlYXN0IDEgY2hhcmFjdGVyJyk7XG5cbiAgICAvLyBJbnZhbGlkIEhSUFxuICAgIGFkZHIgPSBcIlgtYXZheDExeWN4cDY1dno2MG04N21rbTJoc3czbTVmYWRqbHBsZHpudHZyMzNcIjtcbiAgICBleHBlY3QoKCk6IHZvaWQgPT4ge1xuICAgICAgYmludG9vbHMuc3RyaW5nVG9BZGRyZXNzKGFkZHIpO1xuICAgIH0pLnRvVGhyb3coJ0Vycm9yIC0gSW52YWxpZCBIUlAnKTtcblxuICAgIC8vIEV4dHJhIGNoYXJhY3RlciBpbiBkYXRhIGJ5dGVzXG4gICAgYWRkciA9IFwiWC1sb2NhbDFkY2Z5dXVnODd4cWF5bDRmcHAwMno5ZHZrbndoYWZkc3d0dm51Y2RcIjtcbiAgICBleHBlY3QoKCk6IHZvaWQgPT4ge1xuICAgICAgYmludG9vbHMuc3RyaW5nVG9BZGRyZXNzKGFkZHIpO1xuICAgIH0pLnRvVGhyb3coJ0ludmFsaWQgY2hlY2tzdW0gZm9yIGxvY2FsMWRjZnl1dWc4N3hxYXlsNGZwcDAyejlkdmtud2hhZmRzd3R2bnVjZCcpO1xuXG4gICAgLy8gQ2hhbmdlIGNoYXJhY3RlciBpbiBkYXRhIGJ5dGVzXG4gICAgYWRkciA9IFwiWC1sb2NhbDFkY2Z5dXVnOGZ4cWF5bDRmcHAwMno5ZHZrbndoYWZkc3R2bnVjZFwiO1xuICAgIGV4cGVjdCgoKTogdm9pZCA9PiB7XG4gICAgICBiaW50b29scy5zdHJpbmdUb0FkZHJlc3MoYWRkcik7XG4gICAgfSkudG9UaHJvdygnSW52YWxpZCBjaGVja3N1bSBmb3IgbG9jYWwxZGNmeXV1ZzhmeHFheWw0ZnBwMDJ6OWR2a253aGFmZHN0dm51Y2QnKTtcblxuICAgIC8vIEludmFsaWQgY2hhcmFjdGVyIGluIGRhdGEgYnl0ZXNcbiAgICBhZGRyID0gXCJYLWxvY2FsMWRjZnl1dWc4N3hxYnlsNGZwcDAyejlkdmtud2hhZmRzdHZudWNkXCI7XG4gICAgZXhwZWN0KCgpOiB2b2lkID0+IHtcbiAgICAgIGJpbnRvb2xzLnN0cmluZ1RvQWRkcmVzcyhhZGRyKTtcbiAgICB9KS50b1Rocm93KCdVbmtub3duIGNoYXJhY3RlciBiJyk7XG5cbiAgICAvLyBDaGFuZ2UgY2hhcmFjdGVyIGluIGNoZWNrc3VtXG4gICAgYWRkciA9IFwiWC1sb2NhbDFkY2Z5dXVnODd4cWF5bDRmcHAwMno5ZHZrbndoYWZkc3R2bnVjZVwiO1xuICAgIGV4cGVjdCgoKTogdm9pZCA9PiB7XG4gICAgICBiaW50b29scy5zdHJpbmdUb0FkZHJlc3MoYWRkcik7XG4gICAgfSkudG9UaHJvdygnSW52YWxpZCBjaGVja3N1bSBmb3IgbG9jYWwxZGNmeXV1Zzg3eHFheWw0ZnBwMDJ6OWR2a253aGFmZHN0dm51Y2UnKTtcblxuICAgIC8vIEludmFsaWQgRVRILXN0eWxlIGFkZHJlc3NcbiAgICBhZGRyID0gXCIweC5kYjk3QzdjRWNFMjQ5YzJiOThiREMwMjI2Q2M0QzJBNTdCRjUyRkNcIjtcbiAgICBleHBlY3QoKCk6IHZvaWQgPT4ge1xuICAgICAgYmludG9vbHMuc3RyaW5nVG9BZGRyZXNzKGFkZHIpO1xuICAgIH0pLnRvVGhyb3coJ0Vycm9yIC0gSW52YWxpZCBhZGRyZXNzJyk7XG5cbiAgICBsZXQgYWRkcnM6IHN0cmluZ1tdID0gW1xuICAgICAgJ1gtbG9jYWwxZGNmeXV1Zzg3eHFheWw0ZnBwMDJ6OWR2a253aGFmZHN0dm51Y2QnLFxuICAgICAgJ1gtbG9jYWwxbHRnaGowMzNyZTY0OTIwazc4NnVwcmNwODJwOWUzNmo3aHpjNXgnLFxuICAgICAgJ1gtbG9jYWwxZHE0cTlzZXFsMnNweHJrZDdybDgydWNrNWVqM252bGhybHVoNHUnXG4gICAgXTtcbiAgICBhZGRycy5mb3JFYWNoKChhZGRyZXNzOiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgICAgIGJpbnRvb2xzLnN0cmluZ1RvQWRkcmVzcyhhZGRyZXNzKTtcbiAgICB9KTtcbiAgICBhZGRycyA9IFtcbiAgICAgICdYLWZ1amkxZGNmeXV1Zzg3eHFheWw0ZnBwMDJ6OWR2a253aGFmZHM3ZDI5aDYnLFxuICAgICAgJ1gtZnVqaTFsdGdoajAzM3JlNjQ5MjBrNzg2dXByY3A4MnA5ZTM2anRrbXBtMycsXG4gICAgICAnWC1mdWppMWRxNHE5c2VxbDJzcHhya2Q3cmw4MnVjazVlajNudmxoazc5dzZ0J1xuICAgIF07XG4gICAgYWRkcnMuZm9yRWFjaCgoYWRkcmVzczogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgICBiaW50b29scy5zdHJpbmdUb0FkZHJlc3MoYWRkcmVzcyk7XG4gICAgfSk7XG4gICAgYWRkcnMgPSBbXG4gICAgICAnWC1hdmF4MWRjZnl1dWc4N3hxYXlsNGZwcDAyejlkdmtud2hhZmRzamx3Nm05JyxcbiAgICAgICdYLWF2YXgxbHRnaGowMzNyZTY0OTIwazc4NnVwcmNwODJwOWUzNmo4eWw3aHcnLFxuICAgICAgJ1gtYXZheDFkcTRxOXNlcWwyc3B4cmtkN3JsODJ1Y2s1ZWozbnZsaDZ2cDNrNSdcbiAgICBdO1xuICAgIGFkZHJzLmZvckVhY2goKGFkZHJlc3M6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgICAgYmludG9vbHMuc3RyaW5nVG9BZGRyZXNzKGFkZHJlc3MpO1xuICAgIH0pO1xuICAgIGFkZHJzID0gW1xuICAgICAgJ1AtbG9jYWwxZGNmeXV1Zzg3eHFheWw0ZnBwMDJ6OWR2a253aGFmZHN0dm51Y2QnLFxuICAgICAgJ1AtbG9jYWwxbHRnaGowMzNyZTY0OTIwazc4NnVwcmNwODJwOWUzNmo3aHpjNXgnLFxuICAgICAgJ1AtbG9jYWwxZHE0cTlzZXFsMnNweHJrZDdybDgydWNrNWVqM252bGhybHVoNHUnXG4gICAgXVxuICAgIGFkZHJzLmZvckVhY2goKGFkZHJlc3M6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgICAgYmludG9vbHMuc3RyaW5nVG9BZGRyZXNzKGFkZHJlc3MpO1xuICAgIH0pO1xuICAgIGFkZHJzID0gW1xuICAgICAgJ1AtZnVqaTFkY2Z5dXVnODd4cWF5bDRmcHAwMno5ZHZrbndoYWZkczdkMjloNicsXG4gICAgICAnUC1mdWppMWx0Z2hqMDMzcmU2NDkyMGs3ODZ1cHJjcDgycDllMzZqdGttcG0zJyxcbiAgICAgICdQLWZ1amkxZHE0cTlzZXFsMnNweHJrZDdybDgydWNrNWVqM252bGhrNzl3NnQnXG4gICAgXVxuICAgIGFkZHJzLmZvckVhY2goKGFkZHJlc3M6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgICAgYmludG9vbHMuc3RyaW5nVG9BZGRyZXNzKGFkZHJlc3MpO1xuICAgIH0pO1xuICAgIGFkZHJzID0gW1xuICAgICAgJ1AtYXZheDFkY2Z5dXVnODd4cWF5bDRmcHAwMno5ZHZrbndoYWZkc2psdzZtOScsXG4gICAgICAnUC1hdmF4MWx0Z2hqMDMzcmU2NDkyMGs3ODZ1cHJjcDgycDllMzZqOHlsN2h3JyxcbiAgICAgICdQLWF2YXgxZHE0cTlzZXFsMnNweHJrZDdybDgydWNrNWVqM252bGg2dnAzazUnXG4gICAgXVxuICAgIGFkZHJzLmZvckVhY2goKGFkZHJlc3M6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgICAgYmludG9vbHMuc3RyaW5nVG9BZGRyZXNzKGFkZHJlc3MpO1xuICAgIH0pO1xuXG4gICAgYWRkcnMgPSBbXG4gICAgICAnQy1sb2NhbDFkY2Z5dXVnODd4cWF5bDRmcHAwMno5ZHZrbndoYWZkc3R2bnVjZCcsXG4gICAgICAnQy1sb2NhbDFsdGdoajAzM3JlNjQ5MjBrNzg2dXByY3A4MnA5ZTM2ajdoemM1eCcsXG4gICAgICAnQy1sb2NhbDFkcTRxOXNlcWwyc3B4cmtkN3JsODJ1Y2s1ZWozbnZsaHJsdWg0dSdcbiAgICBdO1xuICAgIGFkZHJzLmZvckVhY2goKGFkZHJlc3M6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgICAgYmludG9vbHMuc3RyaW5nVG9BZGRyZXNzKGFkZHJlc3MpO1xuICAgIH0pO1xuXG4gICAgYWRkcnMgPSBbXG4gICAgICAnQy1mdWppMWRjZnl1dWc4N3hxYXlsNGZwcDAyejlkdmtud2hhZmRzN2QyOWg2JyxcbiAgICAgICdDLWZ1amkxbHRnaGowMzNyZTY0OTIwazc4NnVwcmNwODJwOWUzNmp0a21wbTMnLFxuICAgICAgJ0MtZnVqaTFkcTRxOXNlcWwyc3B4cmtkN3JsODJ1Y2s1ZWozbnZsaGs3OXc2dCdcbiAgICBdO1xuICAgIGFkZHJzLmZvckVhY2goKGFkZHJlc3M6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgICAgYmludG9vbHMuc3RyaW5nVG9BZGRyZXNzKGFkZHJlc3MpO1xuICAgIH0pO1xuXG4gICAgYWRkcnMgPSBbXG4gICAgICAnQy1hdmF4MWRjZnl1dWc4N3hxYXlsNGZwcDAyejlkdmtud2hhZmRzamx3Nm05JyxcbiAgICAgICdDLWF2YXgxbHRnaGowMzNyZTY0OTIwazc4NnVwcmNwODJwOWUzNmo4eWw3aHcnLFxuICAgICAgJ0MtYXZheDFkcTRxOXNlcWwyc3B4cmtkN3JsODJ1Y2s1ZWozbnZsaDZ2cDNrNSdcbiAgICBdO1xuICAgIGFkZHJzLmZvckVhY2goKGFkZHJlc3M6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgICAgYmludG9vbHMuc3RyaW5nVG9BZGRyZXNzKGFkZHJlc3MpO1xuICAgIH0pO1xuXG4gICAgYWRkcnMgPSBbXG4gICAgICBcIlgtZm9vMWRjZnl1dWc4N3hxYXlsNGZwcDAyejlkdmtud2hhZmRzNGsza20zXCIsXG4gICAgICBcIlgtZm9vMWx0Z2hqMDMzcmU2NDkyMGs3ODZ1cHJjcDgycDllMzZqcWRxamg2XCIsXG4gICAgICBcIlgtZm9vMWRxNHE5c2VxbDJzcHhya2Q3cmw4MnVjazVlajNudmxoYTk3YWtxXCJcbiAgICBdXG4gICAgYWRkcnMuZm9yRWFjaCgoYWRkcmVzczogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgICBiaW50b29scy5zdHJpbmdUb0FkZHJlc3MoYWRkcmVzcywgXCJmb29cIik7XG4gICAgfSk7XG5cbiAgICBhZGRycyA9IFtcbiAgICAgIFwiMHg4ZGI5N0M3Y0VjRTI0OWMyYjk4YkRDMDIyNkNjNEMyQTU3QkY1MkZDXCIsXG4gICAgICBcIjB4QzFhZDc4RkRkNGFFZDAyN0ViRDVlOWVlZTg3OGY0NGRjMUUyOTM1OFwiLFxuICAgICAgXCIweDVCNDRiQzI2MjJkYzVERDY2YTk0Y2Q1ZjJhRGMzYTQ5YWJiODY0ZEVcIlxuICAgIF1cbiAgICBhZGRycy5mb3JFYWNoKChhZGRyZXNzOiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgICAgIGJpbnRvb2xzLnN0cmluZ1RvQWRkcmVzcyhhZGRyZXNzKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==